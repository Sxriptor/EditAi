"use client"

import { useState, useRef, useCallback, useEffect, useMemo } from "react"
import { useAuth } from "@/lib/auth-context"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Input } from "@/components/ui/input"
import { Slider } from "@/components/ui/slider"
import { Badge } from "@/components/ui/badge"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Card, CardContent } from "@/components/ui/card"
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"
import { Progress } from "@/components/ui/progress"
import { Separator } from "@/components/ui/separator"
import {
  Menu,
  Upload,
  Wand2,
  Eye,
  Download,
  Share2,
  Sparkles,
  Settings,
  Palette,
  Plus,
  Library,
  TrendingUp,
  Shuffle,
  Compass,
  User,
  HelpCircle,
  Home,
  Play,
  Pause,
  SkipBack,
  SkipForward,
  Video,
  Camera,
  Sun,
  Contrast,
  Sliders,
  RotateCcw,
  Zap,
  ImageIcon,
  Clock,
  Star,
  MoreHorizontal,
  FolderOpen,
  FileImage,
  FileVideo,
  AlertCircle,
  CheckCircle,
  Loader2,
  Maximize,
  Minimize,
  ChevronLeft,
  ChevronRight,
  X,
  Split,
  Palette as PaletteIcon,
  Copy,
  HelpCircle as HelpIcon,
  ChevronDown,
  ChevronUp,
  Filter,
  Lightbulb,
  Camera as CameraIcon,
  Aperture,
  Cloud,
  Zap as EffectIcon,
  Film,
  Droplets,
  CircleDot,
  Target,
  Layers,
  Disc,
  Gauge
} from "lucide-react"

export default function ColorGradeDashboard() {
  const { user, session, loading, signOut } = useAuth()
  const [showOriginal, setShowOriginal] = useState(false)
  const [prompt, setPrompt] = useState("")
  const [lutStrength, setLutStrength] = useState([75])
  const [selectedPreset, setSelectedPreset] = useState<string | null>(null)
  const [isPlaying, setIsPlaying] = useState(false)
  const [hasMedia, setHasMedia] = useState(false)
  const [showProjectsModal, setShowProjectsModal] = useState(false)
  const [mediaType, setMediaType] = useState<'image' | 'video' | null>(null)
  const [mediaUrl, setMediaUrl] = useState<string | null>(null)
  const [isProcessing, setIsProcessing] = useState(false)
  const [uploadProgress, setUploadProgress] = useState(0)
  const [isConverting, setIsConverting] = useState(false)
  const [isDragging, setIsDragging] = useState(false)
  const [colorAdjustments, setColorAdjustments] = useState({
    // Primary Color Controls
    exposure: [0],
    contrast: [25],
    highlights: [-15],
    shadows: [10],
    saturation: [20],
    temperature: [5],
    brightness: [0],
    vibrance: [0],
    clarity: [0],
    hue: [0],
    
    // Advanced Professional Controls
    gamma: [1.0],
    lift: [0],      // Shadows lift (like Da Vinci Resolve)
    gain: [1.0],    // Highlights gain
    offset: [0],    // Midtones offset
    
    // Color Wheels (Professional Grade)
    shadowsHue: [0],
    shadowsSat: [0],
    shadowsLum: [0],
    midtonesHue: [0],
    midtonesSat: [0],
    midtonesLum: [0],
    highlightsHue: [0],
    highlightsSat: [0],
    highlightsLum: [0],
    
    // Film Emulation
    filmGrain: [0],
    vignette: [0],
    chromaKey: [0],
    
    // Curves and Advanced Controls
    highlightDetail: [0],
    shadowDetail: [0],
    colorBalance: [0],
    splitToning: [0],
    luminanceSmoothing: [0],
    colorSmoothing: [0],
    
    // Color Grading Wheels (HSL values for visual wheels)
    shadowsWheel: { h: 0, s: 0, l: 0 },
    midtonesWheel: { h: 0, s: 0, l: 0 },
    highlightsWheel: { h: 0, s: 0, l: 0 },
    
    // Advanced Film & Cinema
    bleachBypass: [0],
    orangeTeal: [0],
    skinTone: [0],
    skyReplacement: [0],
    motionBlur: [0],
  })
  
  // LUT Management State
  const [currentLUT, setCurrentLUT] = useState<string | null>(null)
  const [lutIntensity, setLutIntensity] = useState([100])
  const [availableLUTs, setAvailableLUTs] = useState<Array<{
    name: string;
    data: string;
    preview?: string;
    category: 'cinematic' | 'vintage' | 'modern' | 'creative' | 'ai-generated' | 'imported';
  }>>([])
  const [showLUTBrowser, setShowLUTBrowser] = useState(false)
  const [originalImageData, setOriginalImageData] = useState<string | null>(null)
  const [processedImageData, setProcessedImageData] = useState<string | null>(null)
  const [isExporting, setIsExporting] = useState(false)
  const [fileMetadata, setFileMetadata] = useState<{
    name: string
    size: number
    type: string
    dimensions?: { width: number; height: number }
  } | null>(null)
  const [isAdjusting, setIsAdjusting] = useState(false)
  const adjustmentTimeoutRef = useRef<NodeJS.Timeout | null>(null)
  const [showDiagonalSplit, setShowDiagonalSplit] = useState(false)
  const [showColorPalette, setShowColorPalette] = useState(false)
  const [extractedColors, setExtractedColors] = useState<{
    color: string
    rgb: { r: number; g: number; b: number }
    percentage: number
  }[]>([])
  const [showHelpHints, setShowHelpHints] = useState(false)
  
  // Video processing states
  const [videoDuration, setVideoDuration] = useState<number>(0)
  const [videoCurrentTime, setVideoCurrentTime] = useState<number>(0)
  const [videoFrameRate, setVideoFrameRate] = useState<number>(30)
  const [videoResolution, setVideoResolution] = useState<{ width: number; height: number } | null>(null)
  const [videoThumbnails, setVideoThumbnails] = useState<string[]>([])
  const [processingProgress, setProcessingProgress] = useState<number>(0)
  
  // Advanced feature states
  const [batchProcessing, setBatchProcessing] = useState(false)
  const [projectTemplates, setProjectTemplates] = useState<string[]>([])
  const [exportQueue, setExportQueue] = useState<any[]>([])
  const [performanceMode, setPerformanceMode] = useState<'quality' | 'speed'>('quality')

  const [activeTab, setActiveTab] = useState('home')
  const [projectHistory, setProjectHistory] = useState<any[]>([])
  const [promptHistory, setPromptHistory] = useState<string[]>([])
  const [aiSummary, setAiSummary] = useState<string>('')
  const [isNavCollapsed, setIsNavCollapsed] = useState(false)
  const [savedStyles, setSavedStyles] = useState<any[]>([])
  const [showStyleSaveDialog, setShowStyleSaveDialog] = useState(false)
  const [currentGeneratedStyle, setCurrentGeneratedStyle] = useState<any>(null)
  const [workflowMode, setWorkflowMode] = useState<'color-grade' | 'image-repurpose'>('color-grade')
  
  // Handle workflow mode changes
  const handleWorkflowModeChange = (newMode: 'color-grade' | 'image-repurpose') => {
    setWorkflowMode(newMode)
    // Clear mode-specific selections when switching
    if (newMode === 'color-grade') {
      setSelectedMainFocus([])
    }
    setSelectedPromptStyles([]) // Clear styles as they're different for each mode
  }
  const [activeImageView, setActiveImageView] = useState<'before' | 'after'>('after')
  const fileInputRef = useRef<HTMLInputElement>(null)

  // Preset/Favorites management
  const [presetViewMode, setPresetViewMode] = useState<'presets' | 'favorites'>('presets')
  const [defaultPresets] = useState([
    { id: 1, name: 'Cinematic', preview: '#f59e0b', category: 'film' },
    { id: 2, name: 'Vintage', preview: '#dc2626', category: 'retro' },
    { id: 3, name: 'Modern', preview: '#3b82f6', category: 'clean' },
    { id: 4, name: 'Moody', preview: '#6366f1', category: 'dark' },
    { id: 5, name: 'Bright', preview: '#eab308', category: 'vibrant' },
    { id: 6, name: 'Cool Tone', preview: '#06b6d4', category: 'cool' }
  ])

  // Prompt Styles System
  const [showPromptStyles, setShowPromptStyles] = useState(false)
  const [selectedPromptStyles, setSelectedPromptStyles] = useState<string[]>([])
  
  // Main Focus System (for Image Repurpose)
  const [showMainFocus, setShowMainFocus] = useState(false)
  const [selectedMainFocus, setSelectedMainFocus] = useState<string[]>([])
  const [mainFocusOptions] = useState([
    'face', 'body', 'hands', 'eyes', 'hair', 'clothing', 'pose', 'expression',
    'background', 'lighting', 'overall composition', 'skin tone', 'facial features'
  ])

  // Accordion state for color grading sections
  const [expandedSections, setExpandedSections] = useState({
    basic: true,
    professional: false,
    colorWheels: false,
    curves: false,
    filmEmulation: false,
    advanced: false
  })

  const toggleSection = (section: keyof typeof expandedSections) => {
    setExpandedSections(prev => ({
      ...prev,
      [section]: !prev[section]
    }))
  }
  
  // Main Focus toggle function (up to 3 selections)
  const toggleMainFocus = (focus: string) => {
    setSelectedMainFocus(prev => {
      if (prev.includes(focus)) {
        // Remove the focus
        return prev.filter(f => f !== focus)
      } else if (prev.length < 3) {
        // Add the focus if under limit
        return [...prev, focus]
      } else {
        // At limit - don't add more
        return prev
      }
    })
  }
  
  // Dynamic styles data based on workflow mode
  const getPromptStylesData = () => {
    if (workflowMode === 'color-grade') {
      return {
        look: [
          'cinematic', 'vintage film', 'modern clean', 'moody dark', 'bright airy',
          'warm golden', 'cool blue', 'high contrast', 'soft pastel', 'dramatic'
        ],
        film: [
          'Kodak Portra', 'Fuji Pro 400H', 'Ilford HP5', 'Kodak Tri-X', 'Polaroid SX-70',
          '35mm grain', '16mm texture', 'Super 8', 'film emulation', 'analog warmth'
        ],
        color: [
          'orange and teal', 'warm sunset', 'cool winter', 'desaturated', 'vibrant pop',
          'monochromatic', 'complementary', 'split toning', 'color grading', 'selective color'
        ],
        style: [
          'Hollywood blockbuster', 'indie film', 'documentary', 'music video', 'commercial',
          'fashion editorial', 'street photography', 'portrait style', 'landscape mood'
        ],
        mood: [
          'nostalgic', 'melancholic', 'uplifting', 'mysterious', 'romantic',
          'energetic', 'calm', 'intense', 'dreamy', 'gritty', 'ethereal'
        ],
        era: [
          '1970s film', '1980s neon', '1990s grunge', '2000s digital', 'retro vintage',
          'modern minimalist', 'futuristic', 'timeless classic'
        ]
      }
    } else {
      return {
        lighting: [
          'golden hour', 'soft natural light', 'dramatic lighting', 'studio lighting',
          'neon lighting', 'candlelight', 'harsh shadows', 'backlit', 'rim lighting',
          'volumetric lighting', 'sunset lighting', 'blue hour', 'overcast', 'bright daylight'
        ],
        camera: [
          'DSLR', 'film camera', 'vintage camera', 'iPhone', 'professional camera',
          'instant camera', 'medium format', 'large format', 'action camera', 'security camera'
        ],
        lens: [
          'wide angle', 'telephoto', 'macro', 'fisheye', 'portrait lens',
          '35mm lens', '50mm lens', '85mm lens', '200mm lens', 'zoom lens', 'prime lens'
        ],
        weather: [
          'sunny', 'cloudy', 'rainy', 'stormy', 'foggy', 'snowy',
          'windy', 'humid', 'clear sky', 'dramatic clouds', 'overcast'
        ],
        effects: [
          'bokeh', 'lens flare', 'motion blur', 'depth of field', 'vignette',
          'film grain', 'chromatic aberration', 'light rays', 'double exposure',
          'long exposure', 'HDR', 'black and white', 'sepia tone', 'vintage filter'
        ],
        style: [
          'cinematic', 'documentary', 'fashion', 'portrait', 'landscape',
          'street photography', 'architectural', 'artistic', 'commercial', 'editorial'
        ],
        mood: [
          'dramatic', 'moody', 'bright and airy', 'dark and mysterious', 'romantic',
          'energetic', 'calm and serene', 'intense', 'dreamy', 'gritty', 'ethereal'
        ]
      }
    }
  }

  // Authentication redirect
  useEffect(() => {
    if (!loading && !user) {
      // Redirect to auth page if not logged in
      window.location.href = '/auth'
    }
  }, [loading, user])

  // Cleanup timeout on unmount
  useEffect(() => {
    return () => {
      if (adjustmentTimeoutRef.current) {
        clearTimeout(adjustmentTimeoutRef.current)
      }
    }
  }, [])

  // For demo purposes - add a button to navigate to auth page
  const navigateToAuth = () => {
    window.location.href = "/auth"
  }

  const sidebarItems = [
    { icon: Home, label: "Home", id: "home", active: activeTab === 'home' },
    { icon: Plus, label: "New Project", id: "new-project", active: activeTab === 'new-project' },
    { icon: Library, label: "Library", id: "library", active: activeTab === 'library' },
    { icon: Shuffle, label: "Prompt vs Result", id: "prompt-vs-result", active: activeTab === 'prompt-vs-result' },
    { icon: Palette, label: "LUT Presets", id: "lut-presets", active: activeTab === 'lut-presets' },
    { icon: Compass, label: "Explore", id: "explore", active: activeTab === 'explore' },
    { icon: User, label: "Account", id: "account", active: activeTab === 'account' },
    { icon: HelpCircle, label: "Support", id: "support", active: activeTab === 'support' },
  ]

  const trendingPrompts = [
    "Warm cinematic sunset",
    "Cyberpunk neon vibes",
    "Vintage film grain",
    "Moody noir aesthetic",
  ]

  const lutPresets = [
    { name: "Cinematic Gold", strength: 85, color: "from-yellow-500 to-orange-600" },
    { name: "Cyberpunk Neon", strength: 90, color: "from-purple-500 to-pink-500" },
    { name: "Vintage Film", strength: 70, color: "from-orange-500 to-red-500" },
    { name: "Moody Blue", strength: 80, color: "from-blue-500 to-indigo-600" },
  ]

  // Sample projects data
  const projects = [
    {
      id: 1,
      name: "Summer Portrait",
      thumbnail: `data:image/svg+xml;base64,${btoa('<svg width="300" height="200" xmlns="http://www.w3.org/2000/svg"><rect width="100%" height="100%" fill="#f59e0b"/><text x="50%" y="50%" text-anchor="middle" fill="white" font-family="Arial" font-size="16">Summer Portrait</text></svg>')}`,
      type: "image",
      lastModified: "2 hours ago",
      isStarred: true,
    },
    {
      id: 2,
      name: "Tokyo Night",
      thumbnail: `data:image/svg+xml;base64,${btoa('<svg width="300" height="200" xmlns="http://www.w3.org/2000/svg"><rect width="100%" height="100%" fill="#8b5cf6"/><text x="50%" y="50%" text-anchor="middle" fill="white" font-family="Arial" font-size="16">Tokyo Night</text></svg>')}`,
      type: "video",
      lastModified: "1 day ago",
      isStarred: false,
    },
    {
      id: 3,
      name: "Cinematic Grade",
      thumbnail: `data:image/svg+xml;base64,${btoa('<svg width="300" height="200" xmlns="http://www.w3.org/2000/svg"><rect width="100%" height="100%" fill="#ef4444"/><text x="50%" y="50%" text-anchor="middle" fill="white" font-family="Arial" font-size="16">Cinematic Grade</text></svg>')}`,
      type: "image",
      lastModified: "3 days ago",
      isStarred: true,
    },
    {
      id: 4,
      name: "Noir Aesthetic",
      thumbnail: `data:image/svg+xml;base64,${btoa('<svg width="300" height="200" xmlns="http://www.w3.org/2000/svg"><rect width="100%" height="100%" fill="#3b82f6"/><text x="50%" y="50%" text-anchor="middle" fill="white" font-family="Arial" font-size="16">Noir Aesthetic</text></svg>')}`,
      type: "video",
      lastModified: "1 week ago",
      isStarred: false,
    },
    {
      id: 5,
      name: "Golden Hour",
      thumbnail: `data:image/svg+xml;base64,${btoa('<svg width="300" height="200" xmlns="http://www.w3.org/2000/svg"><rect width="100%" height="100%" fill="#f59e0b"/><text x="50%" y="50%" text-anchor="middle" fill="white" font-family="Arial" font-size="16">Golden Hour</text></svg>')}`,
      type: "image",
      lastModified: "2 weeks ago",
      isStarred: true,
    },
    {
      id: 6,
      name: "Cyberpunk Style",
      thumbnail: `data:image/svg+xml;base64,${btoa('<svg width="300" height="200" xmlns="http://www.w3.org/2000/svg"><rect width="100%" height="100%" fill="#ec4899"/><text x="50%" y="50%" text-anchor="middle" fill="white" font-family="Arial" font-size="16">Cyberpunk Style</text></svg>')}`,
      type: "video",
      lastModified: "3 weeks ago",
      isStarred: false,
    },
  ]

  // Extract dominant colors from image (enhanced)
  const extractDominantColors = useCallback((imageData: string) => {
    return new Promise<{color: string, rgb: {r: number, g: number, b: number}, percentage: number}[]>((resolve) => {
      const canvas = document.createElement('canvas')
      const ctx = canvas.getContext('2d')
      const img = new Image()
      
      img.onload = () => {
        // Scale down for faster processing
        const maxSize = 200
        const scale = Math.min(maxSize / img.width, maxSize / img.height)
        const scaledWidth = Math.floor(img.width * scale)
        const scaledHeight = Math.floor(img.height * scale)
        
        canvas.width = scaledWidth
        canvas.height = scaledHeight
        
        if (!ctx) {
          resolve([])
          return
        }
        
        ctx.drawImage(img, 0, 0, scaledWidth, scaledHeight)
        
        const imageDataObj = ctx.getImageData(0, 0, scaledWidth, scaledHeight)
        const data = imageDataObj.data
        const colorMap = new Map<string, number>()
        const totalPixels = data.length / 4
        
        // Sample every 4th pixel and group colors more effectively
        for (let i = 0; i < data.length; i += 16) {
          const r = data[i]
          const g = data[i + 1]
          const b = data[i + 2]
          const alpha = data[i + 3]
          
          // Skip transparent pixels
          if (alpha < 128) continue
          
          // Group similar colors (more granular grouping)
          const groupedR = Math.round(r / 20) * 20
          const groupedG = Math.round(g / 20) * 20
          const groupedB = Math.round(b / 20) * 20
          
          // Skip very dark or very light colors
          const brightness = (groupedR + groupedG + groupedB) / 3
          if (brightness < 20 || brightness > 235) continue
          
          const colorKey = `${groupedR},${groupedG},${groupedB}`
          colorMap.set(colorKey, (colorMap.get(colorKey) || 0) + 1)
        }
        
        // Filter out colors that appear too infrequently
        const minOccurrence = Math.max(1, totalPixels * 0.001)
        
        // Sort by frequency and get top 6 colors
        const sortedColors = Array.from(colorMap.entries())
          .filter(([_, count]) => count >= minOccurrence)
          .sort((a, b) => b[1] - a[1])
          .slice(0, 6)
          .map(([colorKey, count]) => {
            const [r, g, b] = colorKey.split(',').map(Number)
            const percentage = (count / (totalPixels / 4)) * 100 // Adjust for sampling
            
            return {
              color: `rgb(${r}, ${g}, ${b})`,
              rgb: { r, g, b },
              percentage: Math.min(percentage, 100)
            }
          })
        
        console.log(`Found ${sortedColors.length} dominant colors from ${totalPixels} pixels`)
        resolve(sortedColors)
      }
      
      img.onerror = () => {
        console.error('Failed to load image for color extraction')
        resolve([])
      }
      
      img.src = imageData
    })
  }, [])

  // Close image and return to upload screen
  const handleCloseImage = () => {
    setHasMedia(false)
    setMediaType(null)
    setMediaUrl(null)
    setOriginalImageData(null)
    setProcessedImageData(null)
    setFileMetadata(null)
    setShowDiagonalSplit(false)
    setShowColorPalette(false)
    setExtractedColors([])
    setPrompt("")
    setSelectedPreset(null)
    setActiveImageView('after') // Reset to default view
    // Reset adjustments to defaults
    setColorAdjustments({
      // Primary Color Controls
      exposure: [0],
      contrast: [25],
      highlights: [-15],
      shadows: [10],
      saturation: [20],
      temperature: [5],
      brightness: [0],
      vibrance: [0],
      clarity: [0],
      hue: [0],
      
      // Advanced Professional Controls
      gamma: [1.0],
      lift: [0],
      gain: [1.0],
      offset: [0],
      
      // Color Wheels (Professional Grade)
      shadowsHue: [0],
      shadowsSat: [0],
      shadowsLum: [0],
      midtonesHue: [0],
      midtonesSat: [0],
      midtonesLum: [0],
      highlightsHue: [0],
      highlightsSat: [0],
      highlightsLum: [0],
      
      // Film Emulation
      filmGrain: [0],
      vignette: [0],
      chromaKey: [0],
      
      // Curves and Advanced Controls
      highlightDetail: [0],
      shadowDetail: [0],
      colorBalance: [0],
      splitToning: [0],
      luminanceSmoothing: [0],
      colorSmoothing: [0],
      
      // Color Grading Wheels (HSL values for visual wheels)
      shadowsWheel: { h: 0, s: 0, l: 0 },
      midtonesWheel: { h: 0, s: 0, l: 0 },
      highlightsWheel: { h: 0, s: 0, l: 0 },
      
      // Advanced Film & Cinema
      bleachBypass: [0],
      orangeTeal: [0],
      skinTone: [0],
      skyReplacement: [0],
      motionBlur: [0],
    })
  }

  // Extract colors from current image
  const handleExtractColors = async () => {
    if (!originalImageData) return
    
    setShowColorPalette(true)
    setExtractedColors([]) // Clear previous colors
    
    try {
      const colors = await extractDominantColors(originalImageData)
      setExtractedColors(colors)
      console.log('Extracted colors:', colors)
    } catch (error) {
      console.error('Failed to extract colors:', error)
      // Show error state or fallback
      setExtractedColors([])
    }
  }

  // Copy color to clipboard
  const copyColorToClipboard = (color: {color: string, rgb: {r: number, g: number, b: number}}) => {
    const rgbString = `rgb(${color.rgb.r}, ${color.rgb.g}, ${color.rgb.b})`
    const hexString = `#${color.rgb.r.toString(16).padStart(2, '0')}${color.rgb.g.toString(16).padStart(2, '0')}${color.rgb.b.toString(16).padStart(2, '0')}`
    
    navigator.clipboard.writeText(hexString)
    console.log(`Copied color: ${hexString} (${rgbString})`)
  }

  // Apply color adjustments to image using canvas (optimized)
  const applyColorAdjustments = useCallback((imageData: string, adjustments: any) => {
    return new Promise<string>((resolve) => {
      const canvas = document.createElement('canvas')
      const ctx = canvas.getContext('2d')
      const img = new Image()
      
      img.onload = () => {
        // Scale down for faster processing if image is very large
        const maxDimension = 1920
        const scale = Math.min(1, maxDimension / Math.max(img.width, img.height))
        
        canvas.width = img.width * scale
        canvas.height = img.height * scale
        
        // Draw scaled image
        ctx?.drawImage(img, 0, 0, canvas.width, canvas.height)
        
        if (!ctx) {
          resolve(imageData)
          return
        }
        
        // Get image data
        const imageDataObj = ctx.getImageData(0, 0, canvas.width, canvas.height)
        const data = imageDataObj.data
        
        // Pre-calculate adjustment values (enhanced for stronger effects)
        const exposure = adjustments.exposure[0] / 50  // More sensitive exposure
        const contrast = (adjustments.contrast[0] + 100) / 100
        const brightness = adjustments.brightness[0] / 100
        const saturation = (adjustments.saturation[0] + 100) / 100
        const temperature = adjustments.temperature[0] / 50  // More sensitive temperature
        const vibrance = adjustments.vibrance[0] / 100
        const hue = adjustments.hue[0] * Math.PI / 180 // Convert to radians
        
        // Advanced Professional Controls
        const gamma = adjustments.gamma[0]
        const lift = adjustments.lift[0] / 100
        const gain = adjustments.gain[0]
        const offset = adjustments.offset[0] / 100
        
        // Color Wheels
        const shadowsHue = adjustments.shadowsHue[0] * Math.PI / 180
        const shadowsSat = adjustments.shadowsSat[0] / 100
        const shadowsLum = adjustments.shadowsLum[0] / 100
        const midtonesHue = adjustments.midtonesHue[0] * Math.PI / 180
        const midtonesSat = adjustments.midtonesSat[0] / 100
        const midtonesLum = adjustments.midtonesLum[0] / 100
        const highlightsHue = adjustments.highlightsHue[0] * Math.PI / 180
        const highlightsSat = adjustments.highlightsSat[0] / 100
        const highlightsLum = adjustments.highlightsLum[0] / 100
        
        // Film Emulation
        const filmGrain = adjustments.filmGrain[0] / 100
        const vignette = adjustments.vignette[0] / 100
        const chromaKey = adjustments.chromaKey[0] / 100
        
        // Process pixels in chunks for better performance
        const processChunk = (start: number, end: number) => {
          for (let i = start; i < end; i += 4) {
            let r = data[i]
            let g = data[i + 1]
            let b = data[i + 2]
            
            // Apply exposure
            r *= (1 + exposure)
            g *= (1 + exposure)
            b *= (1 + exposure)
            
            // Apply brightness
            r += brightness * 255
            g += brightness * 255
            b += brightness * 255
            
            // Apply contrast
            r = ((r / 255 - 0.5) * contrast + 0.5) * 255
            g = ((g / 255 - 0.5) * contrast + 0.5) * 255
            b = ((b / 255 - 0.5) * contrast + 0.5) * 255
            
            // Apply temperature (enhanced effect)
            const tempStrength = temperature * 30
            if (temperature > 0) {
              // Warm - boost reds, reduce blues
              r += tempStrength
              g += tempStrength * 0.5
              b -= tempStrength * 0.8
            } else {
              // Cool - boost blues, reduce reds
              r += tempStrength * 0.8
              g += tempStrength * 0.3
              b -= tempStrength
            }
            
            // Apply saturation and vibrance
            const gray = 0.299 * r + 0.587 * g + 0.114 * b
            
            // Apply saturation
            r = gray + (r - gray) * saturation
            g = gray + (g - gray) * saturation
            b = gray + (b - gray) * saturation
            
            // Apply vibrance (selective saturation boost)
            if (vibrance !== 0) {
              const maxChannel = Math.max(r, g, b)
              const minChannel = Math.min(r, g, b)
              const channelRange = maxChannel - minChannel
              
              if (channelRange > 0) {
                const vibranceMultiplier = 1 + (vibrance * (1 - channelRange / 255))
                r = gray + (r - gray) * vibranceMultiplier
                g = gray + (g - gray) * vibranceMultiplier
                b = gray + (b - gray) * vibranceMultiplier
              }
            }
            
            // Apply hue shift (simplified)
            if (hue !== 0) {
              const cosH = Math.cos(hue)
              const sinH = Math.sin(hue)
              const newR = r * cosH - g * sinH
              const newG = r * sinH + g * cosH
              r = newR
              g = newG
            }
            
            // Apply clarity (mid-tone contrast)
            if (adjustments.clarity[0] !== 0) {
              const clarityAmount = adjustments.clarity[0] / 100
              const midtone = 0.5
              const rNorm = r / 255
              const gNorm = g / 255
              const bNorm = b / 255
              
              // Apply clarity as mid-tone contrast
              const rClarity = rNorm + (rNorm - midtone) * clarityAmount * 0.5
              const gClarity = gNorm + (gNorm - midtone) * clarityAmount * 0.5
              const bClarity = bNorm + (bNorm - midtone) * clarityAmount * 0.5
              
              r = rClarity * 255
              g = gClarity * 255
              b = bClarity * 255
            }
            
            // Normalize for advanced processing
            let rNorm = r / 255
            let gNorm = g / 255
            let bNorm = b / 255
            
            // Apply Lift/Gamma/Gain (Professional Color Grading)
            if (lift !== 0 || gamma !== 1.0 || gain !== 1.0 || offset !== 0) {
              // Lift (Shadows) - affects darker areas more
              const liftMask = 1 - (rNorm + gNorm + bNorm) / 3
              rNorm += lift * liftMask * 0.5
              gNorm += lift * liftMask * 0.5
              bNorm += lift * liftMask * 0.5
              
              // Gamma (Midtones)
              rNorm = Math.pow(Math.max(0, rNorm), 1 / gamma)
              gNorm = Math.pow(Math.max(0, gNorm), 1 / gamma)
              bNorm = Math.pow(Math.max(0, bNorm), 1 / gamma)
              
              // Gain (Highlights) - affects brighter areas more
              const gainMask = (rNorm + gNorm + bNorm) / 3
              rNorm *= gain + (gain - 1) * gainMask * 0.5
              gNorm *= gain + (gain - 1) * gainMask * 0.5
              bNorm *= gain + (gain - 1) * gainMask * 0.5
              
              // Offset (Overall)
              rNorm += offset
              gNorm += offset
              bNorm += offset
            }
            
            // Color Wheels - Apply hue/sat/lum adjustments per luminance range
            const luminance = 0.299 * rNorm + 0.587 * gNorm + 0.114 * bNorm
            
            // Determine which range this pixel falls into and apply appropriate color wheel
            if (luminance < 0.33) {
              // Shadows
              if (shadowsHue !== 0 || shadowsSat !== 0 || shadowsLum !== 0) {
                // Apply shadows color wheel adjustments
                rNorm += shadowsLum * 0.3
                gNorm += shadowsLum * 0.3
                bNorm += shadowsLum * 0.3
                
                // Saturation adjustment for shadows
                const shadowGray = 0.299 * rNorm + 0.587 * gNorm + 0.114 * bNorm
                rNorm = shadowGray + (rNorm - shadowGray) * (1 + shadowsSat)
                gNorm = shadowGray + (gNorm - shadowGray) * (1 + shadowsSat)
                bNorm = shadowGray + (bNorm - shadowGray) * (1 + shadowsSat)
                
                // Hue shift for shadows
                if (shadowsHue !== 0) {
                  const cosH = Math.cos(shadowsHue)
                  const sinH = Math.sin(shadowsHue)
                  const newR = rNorm * cosH - gNorm * sinH
                  const newG = rNorm * sinH + gNorm * cosH
                  rNorm = newR
                  gNorm = newG
                }
              }
            } else if (luminance < 0.66) {
              // Midtones
              if (midtonesHue !== 0 || midtonesSat !== 0 || midtonesLum !== 0) {
                rNorm += midtonesLum * 0.3
                gNorm += midtonesLum * 0.3
                bNorm += midtonesLum * 0.3
                
                const midtoneGray = 0.299 * rNorm + 0.587 * gNorm + 0.114 * bNorm
                rNorm = midtoneGray + (rNorm - midtoneGray) * (1 + midtonesSat)
                gNorm = midtoneGray + (gNorm - midtoneGray) * (1 + midtonesSat)
                bNorm = midtoneGray + (bNorm - midtoneGray) * (1 + midtonesSat)
                
                if (midtonesHue !== 0) {
                  const cosH = Math.cos(midtonesHue)
                  const sinH = Math.sin(midtonesHue)
                  const newR = rNorm * cosH - gNorm * sinH
                  const newG = rNorm * sinH + gNorm * cosH
                  rNorm = newR
                  gNorm = newG
                }
              }
            } else {
              // Highlights
              if (highlightsHue !== 0 || highlightsSat !== 0 || highlightsLum !== 0) {
                rNorm += highlightsLum * 0.3
                gNorm += highlightsLum * 0.3
                bNorm += highlightsLum * 0.3
                
                const highlightGray = 0.299 * rNorm + 0.587 * gNorm + 0.114 * bNorm
                rNorm = highlightGray + (rNorm - highlightGray) * (1 + highlightsSat)
                gNorm = highlightGray + (gNorm - highlightGray) * (1 + highlightsSat)
                bNorm = highlightGray + (bNorm - highlightGray) * (1 + highlightsSat)
                
                if (highlightsHue !== 0) {
                  const cosH = Math.cos(highlightsHue)
                  const sinH = Math.sin(highlightsHue)
                  const newR = rNorm * cosH - gNorm * sinH
                  const newG = rNorm * sinH + gNorm * cosH
                  rNorm = newR
                  gNorm = newG
                }
              }
            }
            
            // Film Emulation Effects
            if (filmGrain > 0) {
              // Add film grain noise
              const grainAmount = filmGrain * 0.05
              const grain = (Math.random() - 0.5) * grainAmount
              rNorm += grain
              gNorm += grain
              bNorm += grain
            }
            
            // Vignette effect
            if (vignette > 0) {
              const centerX = canvas.width / 2
              const centerY = canvas.height / 2
              const pixelX = (i / 4) % canvas.width
              const pixelY = Math.floor((i / 4) / canvas.width)
              const distanceFromCenter = Math.sqrt(Math.pow(pixelX - centerX, 2) + Math.pow(pixelY - centerY, 2))
              const maxDistance = Math.sqrt(Math.pow(centerX, 2) + Math.pow(centerY, 2))
              const vignetteMultiplier = 1 - (vignette * Math.pow(distanceFromCenter / maxDistance, 2))
              
              rNorm *= vignetteMultiplier
              gNorm *= vignetteMultiplier
              bNorm *= vignetteMultiplier
            }
            
            // Convert back to 0-255 range and clamp
            r = rNorm * 255
            g = gNorm * 255
            b = bNorm * 255
            
            // Clamp values
            data[i] = Math.max(0, Math.min(255, r))
            data[i + 1] = Math.max(0, Math.min(255, g))
            data[i + 2] = Math.max(0, Math.min(255, b))
          }
        }
        
        // Process all pixels
        processChunk(0, data.length)
        
        // Put back the modified image data
        ctx.putImageData(imageDataObj, 0, 0)
        
        // Convert to data URL with good quality
        resolve(canvas.toDataURL('image/jpeg', 0.85))
      }
      
      img.src = imageData
    })
  }, [])

  const handleFileUpload = () => {
    fileInputRef.current?.click()
  }

  const validateFile = (file: File) => {
    const imageTypes = ['image/jpeg', 'image/png', 'image/webp', 'image/heic', 'image/heif']
    const videoTypes = ['video/mp4', 'video/mov', 'video/avi', 'video/webm', 'video/quicktime']
    const allowedTypes = [...imageTypes, ...videoTypes]
    const isHeic = file.name.toLowerCase().endsWith('.heic') || file.name.toLowerCase().endsWith('.heif')
    const isVideo = videoTypes.includes(file.type) || file.type.startsWith('video/')
    
    // Enhanced size limits: 100MB for images, 1GB for 4K videos
    const maxSize = isVideo ? 1024 * 1024 * 1024 : 100 * 1024 * 1024
    const sizeLimit = isVideo ? '1GB' : '100MB'
    
    if (file.size > maxSize) {
      alert(`File size must be less than ${sizeLimit}${isVideo ? ' (4K video supported)' : ''}`)
      return false
    }
    
    if (!allowedTypes.includes(file.type) && !isHeic) {
      alert('Please upload a valid image (JPG, PNG, WebP, HEIC) or video file (MP4, MOV, AVI, WebM)')
      return false
    }
    
    return true
  }

  const convertHeicToJpeg = async (file: File): Promise<File> => {
    try {
      // Dynamically import heic2any to avoid SSR issues
      const heic2any = (await import('heic2any')).default
      
      // Convert HEIC to JPEG using heic2any
      const convertedBlob = await heic2any({
        blob: file,
        toType: 'image/jpeg',
        quality: 0.8
      }) as Blob
      
      // Create a new File object from the converted blob
      const convertedFile = new File(
        [convertedBlob], 
        file.name.replace(/\.heic$/i, '.jpg').replace(/\.heif$/i, '.jpg'),
        { type: 'image/jpeg' }
      )
      
      return convertedFile
    } catch (error) {
      console.error('HEIC conversion failed:', error)
      throw new Error('Failed to convert HEIC image. Please try converting it manually to JPG.')
    }
  }

  // Advanced video metadata extraction
  const extractVideoMetadata = async (file: File, url: string): Promise<any> => {
    return new Promise((resolve) => {
      const video = document.createElement('video')
      video.preload = 'metadata'
      video.src = url
      
      video.onloadedmetadata = () => {
        const metadata = {
          duration: video.duration,
          width: video.videoWidth,
          height: video.videoHeight,
          aspectRatio: video.videoWidth / video.videoHeight
        }
        
        setVideoDuration(video.duration)
        setVideoResolution({ width: video.videoWidth, height: video.videoHeight })
        
                 // Check free tier duration limit (60 seconds)
         // Note: This would be based on actual subscription data from Supabase
         if (video.duration > 60) {
           console.log('Video duration:', video.duration, 'seconds. Consider subscription for longer videos.')
         }
        
        resolve(metadata)
      }
      
      video.onerror = () => {
        console.error('Failed to load video metadata')
        resolve(null)
      }
    })
  }
  
  // Generate video thumbnails for preview
  const generateVideoThumbnails = async (videoUrl: string, duration: number): Promise<string[]> => {
    const thumbnails: string[] = []
    const canvas = document.createElement('canvas')
    const ctx = canvas.getContext('2d')
    const video = document.createElement('video')
    
    return new Promise((resolve) => {
      video.src = videoUrl
      video.addEventListener('loadeddata', () => {
        canvas.width = 160
        canvas.height = 90
        
        const generateThumbnail = (time: number): Promise<string> => {
          return new Promise((thumbResolve) => {
            video.currentTime = time
            video.addEventListener('seeked', () => {
              ctx?.drawImage(video, 0, 0, canvas.width, canvas.height)
              const thumbnail = canvas.toDataURL('image/jpeg', 0.7)
              thumbResolve(thumbnail)
            }, { once: true })
          })
        }
        
        // Generate 5 thumbnails across the video duration
        const promises = []
        for (let i = 0; i < 5; i++) {
          const time = (duration / 5) * i
          promises.push(generateThumbnail(time))
        }
        
        Promise.all(promises).then((thumbs) => {
          setVideoThumbnails(thumbs)
          resolve(thumbs)
        })
      })
    })
  }

  const processFile = async (file: File) => {
    if (!validateFile(file)) return
    
    // Check if it's a HEIC file that needs conversion
    const isHeic = file.type === 'image/heic' || file.type === 'image/heif' || 
                   file.name.toLowerCase().endsWith('.heic') || file.name.toLowerCase().endsWith('.heif')
    
    let processedFile = file
    
    // Convert HEIC files to JPEG
    if (isHeic) {
      setIsConverting(true)
      try {
        processedFile = await convertHeicToJpeg(file)
      } catch (error) {
        setIsConverting(false)
        alert(error instanceof Error ? error.message : 'Failed to convert HEIC image')
        return
      }
      setIsConverting(false)
    }
    
    setUploadProgress(0)
    const fileType = processedFile.type.startsWith('image/') ? 'image' : 'video'
    const url = URL.createObjectURL(processedFile)
    
    // Simulate upload progress
    const interval = setInterval(() => {
      setUploadProgress(prev => {
        if (prev >= 100) {
          clearInterval(interval)
          return 100
        }
        return prev + 10
      })
    }, 200)
    
    // Collect file metadata
    const metadata = {
      name: processedFile.name,
      size: processedFile.size,
      type: processedFile.type,
    }

    // Enhanced processing for different file types
    if (fileType === 'image') {
      const reader = new FileReader()
      reader.onload = (e) => {
        const imageData = e.target?.result as string
        setOriginalImageData(imageData)
        setProcessedImageData(imageData) // Initially same as original
        
        // Get image dimensions
        const img = new Image()
        img.onload = () => {
          setFileMetadata({
            ...metadata,
            dimensions: { width: img.width, height: img.height }
          })
        }
        img.src = imageData
      }
      reader.readAsDataURL(processedFile)
    } else {
      // Enhanced video processing
      try {
        const videoMetadata = await extractVideoMetadata(processedFile, url)
        if (!videoMetadata) {
          URL.revokeObjectURL(url)
          return
        }
        
                 setFileMetadata({
           ...metadata,
           dimensions: { width: videoMetadata.width, height: videoMetadata.height }
         })
        
        // Generate thumbnails for video preview
        await generateVideoThumbnails(url, videoMetadata.duration)
        
      } catch (error) {
        console.error('Video processing failed:', error)
        alert('Failed to process video file')
        return
      }
    }

    // Wait for upload progress to complete
    setTimeout(() => {
      setMediaType(fileType)
      setMediaUrl(url)
      setHasMedia(true)
      
      // Add to project history with enhanced metadata
      const newProject = {
        id: Date.now(),
        name: processedFile.name,
        type: fileType,
        url: url,
        timestamp: new Date(),
        adjustments: { ...colorAdjustments },
        metadata: {
          size: processedFile.size,
          duration: fileType === 'video' ? videoDuration : undefined,
          resolution: videoResolution || undefined
        }
      }
      setProjectHistory(prev => [newProject, ...prev])
    }, 2000)
  }

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files
    if (files && files.length > 0) {
      setShowProjectsModal(false)
      processFile(files[0])
    }
  }

  const handleDragOver = useCallback((e: React.DragEvent) => {
    e.preventDefault()
    setIsDragging(true)
  }, [])

  const handleDragLeave = useCallback((e: React.DragEvent) => {
    e.preventDefault()
    setIsDragging(false)
  }, [])

  const handleDrop = useCallback((e: React.DragEvent) => {
    e.preventDefault()
    setIsDragging(false)
    
    const files = Array.from(e.dataTransfer.files)
    if (files.length > 0) {
      setShowProjectsModal(false)
      processFile(files[0])
    }
  }, [])

  const handleGenerateLook = async () => {
    if (!prompt.trim()) return
    
    setIsProcessing(true)
    
    // Add to prompt history
    if (!promptHistory.includes(prompt)) {
      setPromptHistory(prev => [prompt, ...prev.slice(0, 9)]) // Keep last 10 prompts
    }
    
    try {
      console.log('🚀 Sending AI request:', prompt)
      console.log('📷 Original image:', originalImageData ? 'Included' : 'None')
      console.log('🎨 Selected styles:', selectedPromptStyles)
      console.log('🎯 Main focus:', selectedMainFocus.length > 0 ? selectedMainFocus.join(', ') : 'None')
      console.log('🔄 Workflow mode:', workflowMode)
      
      // Call our AI backend with authentication
      const response = await fetch('/api/ai/process-prompt', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${session?.access_token}`,
        },
        body: JSON.stringify({
          promptText: selectedPromptStyles.length > 0 
            ? `${prompt}, ${selectedPromptStyles.join(', ')}`
            : prompt,
          mediaUrl: originalImageData || mediaUrl, // Send image for AI analysis
          mediaType: mediaType,
          workflowMode: workflowMode, // Pass the selected workflow mode
          selectedStyles: selectedPromptStyles, // Send styles array separately for processing
          mainFocus: workflowMode === 'image-repurpose' && selectedMainFocus.length > 0 ? selectedMainFocus : null, // Send main focus for Image Repurpose
          projectId: null // Can add project tracking later
        }),
      })

      if (!response.ok) {
        throw new Error(`AI request failed: ${response.status}`)
      }

      const aiResult = await response.json()
      console.log('✅ AI Response:', aiResult)

      // Convert AI edit steps to color adjustments with professional-grade intelligence
      const convertAIStepsToAdjustments = (editSteps: any[], aiSummary?: string) => {
        let adjustments = { ...colorAdjustments }
        
        // Analyze AI summary for overall mood and style direction
        const summary = aiSummary?.toLowerCase() || ''
        
        editSteps.forEach(step => {
          const description = step.description.toLowerCase()
          const value = step.parameters.value || step.parameters.intensity || 0
          
          switch (step.action) {
            case 'adjust_exposure':
              adjustments.exposure = [value]
              break
            case 'adjust_contrast':
              adjustments.contrast = [value]
              break
            case 'adjust_color':
            case 'adjust_saturation':
              adjustments.saturation = [value]
              break
            case 'adjust_temperature':
              adjustments.temperature = [value]
              break
            case 'adjust_highlights':
              adjustments.highlights = [value]
              break
            case 'adjust_shadows':
              adjustments.shadows = [value]
              break
            case 'adjust_brightness':
              adjustments.brightness = [value]
              break
            case 'adjust_vibrance':
              adjustments.vibrance = [value]
              break
            case 'adjust_clarity':
              adjustments.clarity = [value]
              break
            case 'adjust_hue':
              adjustments.hue = [value]
              break
            
            // Professional color wheel adjustments
            case 'adjust_shadows_color':
              adjustments.shadowsHue = [step.parameters.hue || 0]
              adjustments.shadowsSat = [step.parameters.saturation || 0]
              adjustments.shadowsLum = [step.parameters.luminance || value]
              break
            case 'adjust_midtones_color':
              adjustments.midtonesHue = [step.parameters.hue || 0]
              adjustments.midtonesSat = [step.parameters.saturation || 0]
              adjustments.midtonesLum = [step.parameters.luminance || value]
              break
            case 'adjust_highlights_color':
              adjustments.highlightsHue = [step.parameters.hue || 0]
              adjustments.highlightsSat = [step.parameters.saturation || 0]
              adjustments.highlightsLum = [step.parameters.luminance || value]
              break
            
            // Film emulation
            case 'add_film_grain':
              adjustments.filmGrain = [value]
              break
            case 'add_vignette':
              adjustments.vignette = [value]
              break
            
            // Professional lift/gamma/gain
            case 'adjust_lift':
              adjustments.lift = [value]
              break
            case 'adjust_gamma':
              adjustments.gamma = [value / 100 + 1] // Convert to gamma value
              break
            case 'adjust_gain':
              adjustments.gain = [value / 100 + 1] // Convert to gain value
              break
            case 'adjust_offset':
              adjustments.offset = [value]
              break
            
            // Advanced controls
            case 'adjust_highlight_detail':
              adjustments.highlightDetail = [value]
              break
            case 'adjust_shadow_detail':
              adjustments.shadowDetail = [value]
              break
            case 'adjust_color_balance':
              adjustments.colorBalance = [value]
              break
            case 'adjust_skin_tone':
              adjustments.skinTone = [value]
              break
            case 'adjust_luminance_smoothing':
              adjustments.luminanceSmoothing = [value]
              break
            case 'adjust_color_smoothing':
              adjustments.colorSmoothing = [value]
              break
            
            // Film emulation advanced
            case 'apply_bleach_bypass':
              adjustments.bleachBypass = [value]
              break
            case 'apply_orange_teal':
              adjustments.orangeTeal = [value]
              adjustments.shadowsHue = [15] // Teal shadows
              adjustments.highlightsHue = [-25] // Orange highlights
              break
            
            // Color wheels (handled separately through UI interactions)
            case 'adjust_shadows_wheel':
            case 'adjust_midtones_wheel':
            case 'adjust_highlights_wheel':
              // These are handled by the ColorWheel component directly
              console.log(`Color wheel adjustment: ${step.action}`, step.parameters)
              break
              
            // Style-based intelligent adjustments
            case 'apply_cinematic_look':
              adjustments.contrast = [Math.max(adjustments.contrast[0], 35)]
              adjustments.shadows = [Math.max(adjustments.shadows[0], 15)]
              adjustments.highlights = [Math.min(adjustments.highlights[0], -20)]
              adjustments.shadowsHue = [10] // Slight blue in shadows
              adjustments.highlightsHue = [-5] // Slight orange in highlights
              adjustments.vignette = [15]
              break
              
            case 'apply_vintage_look':
              adjustments.temperature = [Math.max(adjustments.temperature[0], 25)]
              adjustments.saturation = [Math.max(adjustments.saturation[0], 20)]
              adjustments.filmGrain = [Math.max(adjustments.filmGrain[0], 20)]
              adjustments.vignette = [Math.max(adjustments.vignette[0], 25)]
              adjustments.lift = [Math.max(adjustments.lift[0], 8)]
              break
              
            case 'apply_moody_look':
              adjustments.shadows = [Math.max(adjustments.shadows[0], 25)]
              adjustments.highlights = [Math.min(adjustments.highlights[0], -25)]
              adjustments.temperature = [Math.min(adjustments.temperature[0], -10)]
              adjustments.shadowsHue = [15] // Blue shadows
              adjustments.vignette = [Math.max(adjustments.vignette[0], 20)]
              break
              
            default:
              // Intelligent keyword-based adjustments
              if (description.includes('warm') || description.includes('golden')) {
                adjustments.temperature = [Math.max(adjustments.temperature[0], 20)]
                adjustments.highlightsHue = [-8] // Orange highlights
              }
              if (description.includes('cool') || description.includes('blue')) {
                adjustments.temperature = [Math.min(adjustments.temperature[0], -15)]
                adjustments.shadowsHue = [12] // Blue shadows
              }
              if (description.includes('contrast') || description.includes('dramatic')) {
                adjustments.contrast = [Math.max(adjustments.contrast[0], 40)]
                adjustments.clarity = [Math.max(adjustments.clarity[0], 15)]
              }
              if (description.includes('bright') || description.includes('airy')) {
                adjustments.exposure = [Math.max(adjustments.exposure[0], 15)]
                adjustments.shadows = [Math.max(adjustments.shadows[0], 20)]
              }
              if (description.includes('dark') || description.includes('moody')) {
                adjustments.shadows = [Math.max(adjustments.shadows[0], 30)]
                adjustments.highlights = [Math.min(adjustments.highlights[0], -20)]
              }
              if (description.includes('film') || description.includes('grain')) {
                adjustments.filmGrain = [Math.max(adjustments.filmGrain[0], 15)]
                adjustments.gamma = [1.1]
              }
              if (description.includes('vintage') || description.includes('retro')) {
                adjustments.temperature = [Math.max(adjustments.temperature[0], 25)]
                adjustments.vignette = [Math.max(adjustments.vignette[0], 20)]
                adjustments.lift = [Math.max(adjustments.lift[0], 8)]
              }
          }
        })
        
        return adjustments
      }

      // Handle different AI response types
      if (aiResult.success && aiResult.data) {
        // Check if it's image generation
        if (aiResult.data.generated_image) {
          console.log('🎨 Generated new image:', aiResult.data.generated_image)
          
          if (workflowMode === 'image-repurpose') {
            // For Image Repurpose: Keep original as "before", new image as "after"
            // originalImageData stays as the uploaded image
            setProcessedImageData(aiResult.data.generated_image)
            setMediaUrl(aiResult.data.generated_image) // Show the generated image by default
            setActiveImageView('after') // Focus on the new generated image
          } else {
            // For Color Grade: Replace everything with generated image
            setMediaUrl(aiResult.data.generated_image)
            setOriginalImageData(aiResult.data.generated_image)
            setProcessedImageData(aiResult.data.generated_image)
          }
          
          setMediaType('image')
          setHasMedia(true)
          
          // Apply generated style if available
          if (aiResult.data.generated_style) {
            setColorAdjustments(aiResult.data.generated_style.adjustments)
            setCurrentGeneratedStyle(aiResult.data.generated_style)
            
            // For Image Repurpose mode, don't apply additional adjustments to generated image
            if (workflowMode !== 'image-repurpose') {
              const processedImage = await applyColorAdjustments(aiResult.data.generated_image, aiResult.data.generated_style.adjustments)
              setProcessedImageData(processedImage)
              setMediaUrl(processedImage)
            }
          } else {
            // If no explicit style, create one from current adjustments and prompt
            const generatedStyle = {
              name: prompt.substring(0, 30) + '...',
              description: prompt,
              adjustments: colorAdjustments,
              timestamp: Date.now()
            }
            setCurrentGeneratedStyle(generatedStyle)
          }
          
          // Always show style save dialog for successful AI generations
          setTimeout(() => {
            setShowStyleSaveDialog(true)
          }, 1000) // Show after a short delay to let user see the result
          
        } else if (aiResult.data.edit_steps) {
          // Regular editing mode
          const aiAdjustments = convertAIStepsToAdjustments(aiResult.data.edit_steps, aiResult.data.edit_summary)
          setColorAdjustments(aiAdjustments)
          
          // Apply the AI-generated adjustments to the image
          if (originalImageData && mediaType === 'image') {
            const processedImage = await applyColorAdjustments(originalImageData, aiAdjustments)
            setProcessedImageData(processedImage)
            setMediaUrl(processedImage)
          }
          
          // Create style object for potential saving
          const generatedStyle = {
            name: prompt.substring(0, 30) + '...',
            description: prompt,
            adjustments: aiAdjustments,
            timestamp: Date.now()
          }
          setCurrentGeneratedStyle(generatedStyle)
          
          // Show style save dialog
          setTimeout(() => {
            setShowStyleSaveDialog(true)
          }, 1000)
        }
        
        // Show AI summary in console and UI
        console.log('🎨 AI Edit Summary:', aiResult.data.edit_summary)
        console.log('🔧 Applied adjustments:', aiResult.data.edit_steps || aiResult.data.generated_style?.adjustments)
        
        // Set AI summary for UI display
        setAiSummary(aiResult.data.edit_summary)
      } else {
        throw new Error('AI response format invalid')
      }
      
    } catch (error) {
      console.error('❌ AI processing failed:', error)
      
      // Fallback to keyword-based system if AI fails
      console.log('📝 Falling back to keyword matching...')
      const fallbackAdjustments = generateFallbackAdjustments(prompt)
      setColorAdjustments(fallbackAdjustments)
      
      if (originalImageData && mediaType === 'image') {
        const processedImage = await applyColorAdjustments(originalImageData, fallbackAdjustments)
        setProcessedImageData(processedImage)
        setMediaUrl(processedImage)
      }
    } finally {
      setIsProcessing(false)
    }
  }

  // Fallback keyword-based adjustments if AI fails
  const generateFallbackAdjustments = (prompt: string) => {
      const lowerPrompt = prompt.toLowerCase()
      let adjustments = { ...colorAdjustments }
      
      if (lowerPrompt.includes('cinematic') || lowerPrompt.includes('film')) {
        adjustments.contrast = [35]
        adjustments.saturation = [15]
        adjustments.temperature = [10]
        adjustments.exposure = [5]
    } else if (lowerPrompt.includes('warm') || lowerPrompt.includes('sunset') || lowerPrompt.includes('golden')) {
        adjustments.temperature = [25]
        adjustments.exposure = [10]
        adjustments.saturation = [20]
        adjustments.highlights = [-10]
    } else if (lowerPrompt.includes('cool') || lowerPrompt.includes('blue') || lowerPrompt.includes('winter')) {
        adjustments.temperature = [-20]
        adjustments.saturation = [10]
        adjustments.contrast = [20]
    } else if (lowerPrompt.includes('vintage') || lowerPrompt.includes('retro') || lowerPrompt.includes('old')) {
        adjustments.contrast = [40]
        adjustments.saturation = [30]
        adjustments.temperature = [15]
        adjustments.exposure = [-5]
    } else if (lowerPrompt.includes('vibrant') || lowerPrompt.includes('colorful') || lowerPrompt.includes('bright')) {
        adjustments.saturation = [40]
        adjustments.vibrance = [30]
        adjustments.exposure = [8]
        adjustments.contrast = [25]
    } else {
      // Default creative adjustment
      adjustments.contrast = [20]
      adjustments.saturation = [15]
      adjustments.exposure = [5]
      }
      
      return adjustments
  }

  // Debounced color adjustment function for smooth performance
  const debouncedApplyAdjustments = useCallback(
    async (adjustments: any) => {
      if (!originalImageData || mediaType !== 'image') return
      
      setIsAdjusting(true)
      try {
        const processedImage = await applyColorAdjustments(originalImageData, adjustments)
        setProcessedImageData(processedImage)
        setMediaUrl(processedImage)
      } catch (error) {
        console.error('Failed to apply color adjustments:', error)
      } finally {
        setIsAdjusting(false)
      }
    },
    [originalImageData, mediaType, applyColorAdjustments]
  )

  const handleColorAdjustment = useCallback((type: string, value: number[]) => {
    const newAdjustments = {
      ...colorAdjustments,
      [type]: value
    }
    setColorAdjustments(newAdjustments)
    
    // Clear existing timeout
    if (adjustmentTimeoutRef.current) {
      clearTimeout(adjustmentTimeoutRef.current)
    }
    
    // Debounce the actual image processing
    adjustmentTimeoutRef.current = setTimeout(() => {
      debouncedApplyAdjustments(newAdjustments)
    }, 150) // 150ms debounce delay
  }, [colorAdjustments, debouncedApplyAdjustments])

  const handleExport = async () => {
    if (!mediaUrl) return
    
    setIsExporting(true)
    
    try {
      let exportUrl = mediaUrl
      
      // For images, export the processed version
      if (mediaType === 'image' && processedImageData) {
        exportUrl = processedImageData
      }
      
      // Create download link
      const link = document.createElement('a')
      link.href = exportUrl
      link.download = `colorgrade-${Date.now()}.${mediaType === 'video' ? 'mp4' : 'jpg'}`
      document.body.appendChild(link)
      link.click()
      document.body.removeChild(link)
      
      // Show success message
      console.log('Export completed successfully')
    } catch (error) {
      console.error('Export failed:', error)
      alert('Export failed. Please try again.')
    } finally {
      setIsExporting(false)
    }
  }

  const applyLUTPreset = async (presetName: string) => {
    if (!originalImageData || mediaType !== 'image') return
    
    setIsProcessing(true)
    
    // Define preset-specific adjustments (enhanced for dramatic effects)
    const presetAdjustments: { [key: string]: any } = {
      "Cinematic Gold": {
        exposure: [20],
        contrast: [45],
        highlights: [-30],
        shadows: [25],
        saturation: [35],
        temperature: [35],
        brightness: [10],
        vibrance: [30],
        clarity: [15],
        hue: [5],
      },
      "Cyberpunk Neon": {
        exposure: [15],
        contrast: [60],
        highlights: [-40],
        shadows: [35],
        saturation: [60],
        temperature: [-30],
        brightness: [5],
        vibrance: [50],
        clarity: [25],
        hue: [15],
      },
      "Vintage Film": {
        exposure: [-10],
        contrast: [50],
        highlights: [-25],
        shadows: [30],
        saturation: [50],
        temperature: [40],
        brightness: [-15],
        vibrance: [40],
        clarity: [10],
        hue: [10],
      },
      "Moody Blue": {
        exposure: [-20],
        contrast: [55],
        highlights: [-35],
        shadows: [40],
        saturation: [25],
        temperature: [-40],
        brightness: [-10],
        vibrance: [15],
        clarity: [30],
        hue: [-10],
      }
    }
    
    const adjustments = presetAdjustments[presetName] || colorAdjustments
    
    try {
      setColorAdjustments(adjustments)
      const processedImage = await applyColorAdjustments(originalImageData, adjustments)
      setProcessedImageData(processedImage)
      setMediaUrl(processedImage)
      setSelectedPreset(presetName)
      console.log(`Applied preset: ${presetName}`)
    } catch (error) {
      console.error(`Failed to apply preset ${presetName}:`, error)
    } finally {
      setIsProcessing(false)
    }
  }

  const generateCubeLUT = (adjustments: any) => {
    // Generate a basic 3D LUT in .cube format
    const size = 16 // 16x16x16 LUT for smaller file size
    let cubeLUT = `TITLE "ColorGrade LUT"\n`
    cubeLUT += `LUT_3D_SIZE ${size}\n`
    cubeLUT += `DOMAIN_MIN 0.0 0.0 0.0\n`
    cubeLUT += `DOMAIN_MAX 1.0 1.0 1.0\n\n`
    
    for (let b = 0; b < size; b++) {
      for (let g = 0; g < size; g++) {
        for (let r = 0; r < size; r++) {
          // Normalize coordinates to 0-1
          const nr = r / (size - 1)
          const ng = g / (size - 1)
          const nb = b / (size - 1)
          
          // Apply adjustments (simplified)
          let adjR = nr
          let adjG = ng
          let adjB = nb
          
          // Apply exposure
          const exposure = adjustments.exposure[0] / 100
          adjR *= (1 + exposure)
          adjG *= (1 + exposure)
          adjB *= (1 + exposure)
          
          // Apply contrast
          const contrast = (adjustments.contrast[0] + 100) / 100
          adjR = ((adjR - 0.5) * contrast + 0.5)
          adjG = ((adjG - 0.5) * contrast + 0.5)
          adjB = ((adjB - 0.5) * contrast + 0.5)
          
          // Apply temperature (simplified)
          const temperature = adjustments.temperature[0] / 100
          if (temperature > 0) {
            adjR += temperature * 0.1
            adjB -= temperature * 0.1
          } else {
            adjR -= Math.abs(temperature) * 0.1
            adjB += Math.abs(temperature) * 0.1
          }
          
          // Clamp values
          adjR = Math.max(0, Math.min(1, adjR))
          adjG = Math.max(0, Math.min(1, adjG))
          adjB = Math.max(0, Math.min(1, adjB))
          
          cubeLUT += `${adjR.toFixed(6)} ${adjG.toFixed(6)} ${adjB.toFixed(6)}\n`
        }
      }
    }
    
    return cubeLUT
  }

  const exportLUT = () => {
    const lutData = generateCubeLUT(colorAdjustments)
    const blob = new Blob([lutData], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    
    const link = document.createElement('a')
    link.href = url
    link.download = `colorgrade-lut-${Date.now()}.cube`
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    URL.revokeObjectURL(url)
    
    console.log('LUT exported successfully')
  }

  const handleResetAdjustments = async () => {
    const resetAdjustments = {
      // Primary Color Controls
      exposure: [0],
      contrast: [25],
      highlights: [-15],
      shadows: [10],
      saturation: [20],
      temperature: [5],
      brightness: [0],
      vibrance: [0],
      clarity: [0],
      hue: [0],
      
      // Advanced Professional Controls
      gamma: [1.0],
      lift: [0],
      gain: [1.0],
      offset: [0],
      
      // Color Wheels (Professional Grade)
      shadowsHue: [0],
      shadowsSat: [0],
      shadowsLum: [0],
      midtonesHue: [0],
      midtonesSat: [0],
      midtonesLum: [0],
      highlightsHue: [0],
      highlightsSat: [0],
      highlightsLum: [0],
      
      // Film Emulation
      filmGrain: [0],
      vignette: [0],
      chromaKey: [0],
      
      // Curves and Advanced Controls
      highlightDetail: [0],
      shadowDetail: [0],
      colorBalance: [0],
      splitToning: [0],
      luminanceSmoothing: [0],
      colorSmoothing: [0],
      
      // Color Grading Wheels (HSL values for visual wheels)
      shadowsWheel: { h: 0, s: 0, l: 0 },
      midtonesWheel: { h: 0, s: 0, l: 0 },
      highlightsWheel: { h: 0, s: 0, l: 0 },
      
      // Advanced Film & Cinema
      bleachBypass: [0],
      orangeTeal: [0],
      skinTone: [0],
      skyReplacement: [0],
      motionBlur: [0],
    }
    
    setColorAdjustments(resetAdjustments)
    
    // Apply reset to image
    if (originalImageData && mediaType === 'image') {
      setProcessedImageData(originalImageData)
      setMediaUrl(originalImageData)
    }
  }

  const handleProjectClick = (projectId: number) => {
    // Here you would load the selected project
    const project = projects.find(p => p.id === projectId)
    if (project) {
      setMediaType(project.type as 'image' | 'video')
      // Use a data URL for a working placeholder
      const placeholderImage = "data:image/svg+xml;base64," + btoa(`
        <svg width="480" height="600" xmlns="http://www.w3.org/2000/svg">
          <rect width="100%" height="100%" fill="#374151"/>
          <text x="50%" y="45%" text-anchor="middle" fill="#9CA3AF" font-family="Arial" font-size="16">Sample ${project.type}</text>
          <text x="50%" y="55%" text-anchor="middle" fill="#6B7280" font-family="Arial" font-size="12">${project.name}</text>
        </svg>
      `)
      setMediaUrl(placeholderImage)
    }
    console.log("Opening project:", projectId)
    setShowProjectsModal(false)
    setHasMedia(true)
    setActiveTab('home')
  }

  // Advanced project management functions
  const duplicateProject = (projectId: number) => {
    const project = projectHistory.find(p => p.id === projectId)
    if (project) {
      const duplicatedProject = {
        ...project,
        id: Date.now(),
        name: `${project.name} (Copy)`,
        timestamp: new Date()
      }
      setProjectHistory(prev => [duplicatedProject, ...prev])
    }
  }

  const deleteProject = (projectId: number) => {
    setProjectHistory(prev => prev.filter(p => p.id !== projectId))
  }

  const exportProject = async (project: any) => {
    // Add to export queue
    const exportJob = {
      id: Date.now(),
      projectId: project.id,
      name: project.name,
      status: 'queued',
      progress: 0,
      format: 'high-res'
    }
    setExportQueue(prev => [...prev, exportJob])
    
    // Simulate export process
    setTimeout(() => {
      setExportQueue(prev => prev.map(job => 
        job.id === exportJob.id ? { ...job, status: 'processing', progress: 50 } : job
      ))
    }, 1000)
    
    setTimeout(() => {
      setExportQueue(prev => prev.map(job => 
        job.id === exportJob.id ? { ...job, status: 'completed', progress: 100 } : job
      ))
    }, 3000)
  }

  // Batch processing functionality
  const processBatchFiles = async (files: File[]) => {
    setBatchProcessing(true)
    setProcessingProgress(0)
    
    for (let i = 0; i < files.length; i++) {
      const file = files[i]
      await processFile(file)
      setProcessingProgress(((i + 1) / files.length) * 100)
    }
    
    setBatchProcessing(false)
  }

  // Template management
  const saveAsTemplate = (name: string) => {
    const template = {
      name,
      adjustments: { ...colorAdjustments },
      timestamp: new Date()
    }
    setProjectTemplates(prev => [...prev, name])
    // Save to localStorage or database
    localStorage.setItem(`template_${name}`, JSON.stringify(template))
  }

  const loadTemplate = (templateName: string) => {
    const template = localStorage.getItem(`template_${templateName}`)
    if (template) {
      const parsed = JSON.parse(template)
      setColorAdjustments(parsed.adjustments)
    }
  }

  // Style management functions
  const saveCurrentStyle = (styleName: string) => {
    const style = {
      name: styleName,
      adjustments: colorAdjustments,
      description: currentGeneratedStyle?.description || `Custom style created on ${new Date().toLocaleDateString()}`,
      lut_data: currentGeneratedStyle?.lut_data,
      created_at: new Date().toISOString()
    }
    
    const updatedStyles = [...savedStyles, style]
    setSavedStyles(updatedStyles)
    localStorage.setItem('saved_styles', JSON.stringify(updatedStyles))
    
    setShowStyleSaveDialog(false)
    setCurrentGeneratedStyle(null)
  }

  const loadStyle = (style: any) => {
    setColorAdjustments(style.adjustments)
    
    // Apply the style to current image if available
    if (originalImageData && mediaType === 'image') {
      applyColorAdjustments(originalImageData, style.adjustments).then(processedImage => {
        setProcessedImageData(processedImage)
        setMediaUrl(processedImage)
      })
    }
    
    setAiSummary(`Applied "${style.name}" style`)
  }

  const deleteStyle = (styleIndex: number) => {
    const updatedStyles = savedStyles.filter((_, index) => index !== styleIndex)
    setSavedStyles(updatedStyles)
    localStorage.setItem('saved_styles', JSON.stringify(updatedStyles))
  }

  const downloadLUT = (style: any) => {
    if (!style.lut_data) return
    
    const blob = new Blob([style.lut_data], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const link = document.createElement('a')
    link.href = url
    link.download = `${style.name.replace(/\s+/g, '_')}.cube`
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    URL.revokeObjectURL(url)
  }

  // LUT Processing Functions
  const loadLUTFile = async (file: File) => {
    try {
      const lutData = await file.text()
      const lutName = file.name.replace('.cube', '').replace('.3dl', '')
      
      const newLUT = {
        name: lutName,
        data: lutData,
        category: 'imported' as const
      }
      
      setAvailableLUTs(prev => [...prev, newLUT])
      setCurrentLUT(lutData)
      
      // Apply LUT to current image
      if (originalImageData && mediaType === 'image') {
        const processedImage = await applyLUTToImage(originalImageData, lutData, lutIntensity[0])
        setProcessedImageData(processedImage)
        setMediaUrl(processedImage)
      }
      
      console.log('LUT loaded successfully:', lutName)
    } catch (error) {
      console.error('Failed to load LUT file:', error)
      alert('Failed to load LUT file. Please ensure it\'s a valid .cube or .3dl file.')
    }
  }

  const applyLUTToImage = async (imageData: string, lutData: string, intensity: number): Promise<string> => {
    return new Promise((resolve) => {
      const canvas = document.createElement('canvas')
      const ctx = canvas.getContext('2d')
      const img = new Image()
      
      img.onload = () => {
        canvas.width = img.width
        canvas.height = img.height
        ctx?.drawImage(img, 0, 0)
        
        if (!ctx) {
          resolve(imageData)
          return
        }
        
        const imageDataObj = ctx.getImageData(0, 0, canvas.width, canvas.height)
        const data = imageDataObj.data
        
        // Parse LUT data
        const lutTable = parseLUTData(lutData)
        
        // Apply LUT to each pixel
        for (let i = 0; i < data.length; i += 4) {
          const r = data[i] / 255
          const g = data[i + 1] / 255
          const b = data[i + 2] / 255
          
          // Interpolate LUT values
          const newColor = interpolateLUT(lutTable, r, g, b)
          
          // Apply intensity blending
          data[i] = Math.round((newColor.r * intensity + r * (100 - intensity)) / 100 * 255)
          data[i + 1] = Math.round((newColor.g * intensity + g * (100 - intensity)) / 100 * 255)
          data[i + 2] = Math.round((newColor.b * intensity + b * (100 - intensity)) / 100 * 255)
        }
        
        ctx.putImageData(imageDataObj, 0, 0)
        resolve(canvas.toDataURL('image/jpeg', 0.95))
      }
      
      img.src = imageData
    })
  }

  const parseLUTData = (lutData: string) => {
    const lines = lutData.split('\n').filter(line => {
      const trimmed = line.trim()
      return trimmed && !trimmed.startsWith('#') && !trimmed.startsWith('TITLE') && !trimmed.startsWith('LUT_3D_SIZE')
    })
    
    return lines.map(line => {
      const values = line.trim().split(/\s+/).map(Number)
      return { r: values[0], g: values[1], b: values[2] }
    })
  }

  const interpolateLUT = (lutTable: Array<{r: number, g: number, b: number}>, r: number, g: number, b: number) => {
    // Simple nearest neighbor for now - could be enhanced with trilinear interpolation
    const lutSize = Math.round(Math.cbrt(lutTable.length))
    const index = Math.round(r * (lutSize - 1)) * lutSize * lutSize + 
                  Math.round(g * (lutSize - 1)) * lutSize + 
                  Math.round(b * (lutSize - 1))
    
    return lutTable[Math.min(index, lutTable.length - 1)] || { r, g, b }
  }

  const exportCurrentLUT = () => {
    const cubeLUT = generateCubeLUT(colorAdjustments)
    
    const element = document.createElement('a')
    const file = new Blob([cubeLUT], { type: 'text/plain' })
    element.href = URL.createObjectURL(file)
    element.download = `current-adjustments-${Date.now()}.cube`
    document.body.appendChild(element)
    element.click()
    document.body.removeChild(element)
  }

  // Load preset style
  const loadPresetStyle = (presetName: string) => {
    const presetAdjustments = generatePresetAdjustments(presetName)
    setColorAdjustments(presetAdjustments)
    
    // Apply adjustments to image if available
    if (originalImageData && mediaType === 'image') {
      applyColorAdjustments(originalImageData, presetAdjustments)
        .then(processedImage => {
          setProcessedImageData(processedImage)
          setMediaUrl(processedImage)
        })
    }
  }

  // Generate preset adjustments based on style name
  const generatePresetAdjustments = (presetName: string) => {
    const baseAdjustments = { ...colorAdjustments }
    
    // Reset to neutral first
    Object.keys(baseAdjustments).forEach(key => {
      if (key === 'gamma' || key === 'gain') {
        (baseAdjustments as any)[key] = [1.0]
      } else {
        (baseAdjustments as any)[key] = [0]
      }
    })
    
    switch (presetName.toLowerCase()) {
      case 'cinematic':
        return {
          ...baseAdjustments,
          contrast: [35],
          saturation: [15],
          temperature: [10],
          exposure: [5],
          highlights: [-15],
          shadows: [20],
          clarity: [15]
        }
      case 'vintage':
        return {
          ...baseAdjustments,
          temperature: [20],
          saturation: [-10],
          exposure: [-5],
          contrast: [25],
          filmGrain: [30],
          vignette: [25]
        }
      case 'modern':
        return {
          ...baseAdjustments,
          contrast: [20],
          saturation: [25],
          clarity: [20],
          vibrance: [15],
          highlights: [-10]
        }
      case 'moody':
        return {
          ...baseAdjustments,
          shadows: [30],
          highlights: [-25],
          contrast: [40],
          saturation: [10],
          temperature: [-5],
          vignette: [15]
        }
      case 'bright':
        return {
          ...baseAdjustments,
          exposure: [25],
          brightness: [15],
          vibrance: [20],
          saturation: [15],
          highlights: [10]
        }
      case 'cool tone':
        return {
          ...baseAdjustments,
          temperature: [-25],
          saturation: [10],
          contrast: [15],
          clarity: [10],
          midtonesHue: [-10]
        }
      default:
        return baseAdjustments
    }
  }

  // Prompt Styles Management
  const togglePromptStyle = (style: string) => {
    const currentData = getPromptStylesData()
    
    // Find which category this style belongs to
    let foundCategory: string | null = null
    let categoryStyles: string[] = []
    
    for (const [categoryName, styles] of Object.entries(currentData)) {
      if (styles.includes(style)) {
        foundCategory = categoryName
        categoryStyles = styles
        break
      }
    }
    
    if (!foundCategory) return
    
    setSelectedPromptStyles(prev => {
      if (prev.includes(style)) {
        // Remove the style
        return prev.filter(s => s !== style)
      } else {
        // Add the style, but first remove any other style from the same category
        const filteredStyles = prev.filter(s => !categoryStyles.includes(s))
        return [...filteredStyles, style]
      }
    })
  }

  const clearPromptStyles = () => {
    setSelectedPromptStyles([])
  }

  const applyPromptStyles = () => {
    if (selectedPromptStyles.length > 0) {
      const stylesText = selectedPromptStyles.join(', ')
      setPrompt(prev => {
        const currentPrompt = prev.trim()
        if (currentPrompt) {
          return `${currentPrompt}, ${stylesText}`
        } else {
          return stylesText
        }
      })
    }
    setShowPromptStyles(false)
  }

  // Special handler for color wheel changes
  const handleColorWheelChange = (wheelType: 'shadowsWheel' | 'midtonesWheel' | 'highlightsWheel', newValue: { h: number, s: number, l: number }) => {
    setColorAdjustments(prev => ({
      ...prev,
      [wheelType]: newValue
    }))
  }

  // Professional Color Wheel Component (Color.io style)
  const ColorWheel = ({ 
    value, 
    onChange, 
    size = 100, 
    title 
  }: { 
    value: { h: number, s: number, l: number }, 
    onChange: (newValue: { h: number, s: number, l: number }) => void,
    size?: number,
    title: string
  }) => {
    const [isDragging, setIsDragging] = useState(false)
    const [isHovering, setIsHovering] = useState(false)
    
    const handlePointerEvent = (event: React.PointerEvent<HTMLDivElement>) => {
      event.preventDefault()
      const rect = event.currentTarget.getBoundingClientRect()
      const centerX = rect.width / 2
      const centerY = rect.height / 2
      const x = event.clientX - rect.left - centerX
      const y = event.clientY - rect.top - centerY
      
      const distance = Math.sqrt(x * x + y * y)
      const maxRadius = (size / 2) - 12
      
      if (distance <= maxRadius) {
        const angle = Math.atan2(y, x) * 180 / Math.PI
        const hue = (angle + 360) % 360
        const saturation = Math.min((distance / maxRadius) * 100, 100)
        
        onChange({ h: hue, s: saturation, l: value.l })
      }
    }

    const handlePointerDown = (event: React.PointerEvent<HTMLDivElement>) => {
      setIsDragging(true)
      event.currentTarget.setPointerCapture(event.pointerId)
      handlePointerEvent(event)
    }

    const handlePointerMove = (event: React.PointerEvent<HTMLDivElement>) => {
      if (isDragging) {
        handlePointerEvent(event)
      }
    }

    const handlePointerUp = (event: React.PointerEvent<HTMLDivElement>) => {
      setIsDragging(false)
      event.currentTarget.releasePointerCapture(event.pointerId)
    }

    // Calculate indicator position
    const angle = value.h * Math.PI / 180
    const radius = (value.s / 100) * ((size / 2) - 12)
    const indicatorX = Math.cos(angle) * radius + size / 2
    const indicatorY = Math.sin(angle) * radius + size / 2

    // Get the current color for the indicator
    const currentColor = `hsl(${value.h}, ${value.s}%, 50%)`
    const currentColorDark = `hsl(${value.h}, ${value.s}%, 30%)`

    return (
      <div className="space-y-2">
        <div className="text-xs text-gray-400 font-medium text-center tracking-wide">
          {title}
        </div>
        
        <div className="flex flex-col items-center space-y-3">
          {/* Color Wheel with CSS Gradients */}
          <div 
            className="relative cursor-crosshair transition-all duration-200"
            style={{ 
              width: size, 
              height: size,
              transform: isDragging ? 'scale(1.02)' : isHovering ? 'scale(1.01)' : 'scale(1)',
              touchAction: 'none'
            }}
            onPointerDown={handlePointerDown}
            onPointerMove={handlePointerMove}
            onPointerUp={handlePointerUp}
            onMouseEnter={() => setIsHovering(true)}
            onMouseLeave={() => setIsHovering(false)}
          >
            {/* Outer border ring */}
            <div 
              className="absolute inset-0 rounded-full border-2 border-gray-600/50"
              style={{
                background: `conic-gradient(
                  from 0deg,
                  #ff0000 0deg,
                  #ff8000 30deg,
                  #ffff00 60deg,
                  #80ff00 90deg,
                  #00ff00 120deg,
                  #00ff80 150deg,
                  #00ffff 180deg,
                  #0080ff 210deg,
                  #0000ff 240deg,
                  #8000ff 270deg,
                  #ff00ff 300deg,
                  #ff0080 330deg,
                  #ff0000 360deg
                )`,
                borderRadius: '50%'
              }}
            />
            
            {/* Saturation gradient overlay */}
            <div 
              className="absolute inset-1 rounded-full"
              style={{
                background: `radial-gradient(circle, 
                  rgba(255,255,255,1) 0%, 
                  rgba(255,255,255,0.8) 20%, 
                  rgba(255,255,255,0.3) 50%, 
                  rgba(255,255,255,0) 80%
                )`
              }}
            />
            
            {/* Center dot */}
            <div 
              className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 
                         w-3 h-3 bg-gray-800 rounded-full border border-gray-500"
            />
            
            {/* Color indicator */}
            <div 
              className="absolute pointer-events-none transform -translate-x-1/2 -translate-y-1/2 
                         transition-all duration-150 z-10"
              style={{
                left: indicatorX,
                top: indicatorY
              }}
            >
              <div className="relative">
                {/* Outer ring */}
                <div 
                  className="w-6 h-6 rounded-full border-2 border-white shadow-lg"
                  style={{ 
                    backgroundColor: currentColor,
                    transform: isDragging ? 'scale(1.3)' : 'scale(1)',
                    boxShadow: `0 0 0 1px rgba(0,0,0,0.3), 0 2px 8px rgba(0,0,0,0.5)`
                  }}
                />
                {/* Inner ring for better visibility */}
                <div 
                  className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 
                           w-3 h-3 rounded-full border border-white/80"
                  style={{ backgroundColor: currentColorDark }}
                />
              </div>
            </div>
          </div>
          
          {/* Value display with color preview */}
          <div className="w-full space-y-2">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-2">
                <div 
                  className="w-4 h-4 rounded border border-gray-600"
                  style={{ backgroundColor: currentColor }}
                />
                <span className="text-xs text-gray-400">H: {Math.round(value.h)}° S: {Math.round(value.s)}%</span>
              </div>
              <div className="text-xs text-gray-500">
                {value.l > 0 ? '+' : ''}{value.l}
              </div>
            </div>
            
            {/* Luminance slider */}
            <div className="relative">
              <div 
                className="absolute inset-0 rounded-full h-2 border border-gray-700"
                style={{
                  background: `linear-gradient(to right, 
                    hsl(${value.h}, ${value.s}%, 10%), 
                    hsl(${value.h}, ${value.s}%, 50%), 
                    hsl(${value.h}, ${value.s}%, 90%)
                  )`
                }}
              />
              <Slider 
                value={[value.l]} 
                onValueChange={(val) => onChange({ ...value, l: val[0] })}
                min={-100} max={100} step={1} 
                className="relative z-10"
              />
            </div>
          </div>
        </div>
      </div>
    )
  }

  // Load saved styles on mount
  useEffect(() => {
    const saved = localStorage.getItem('saved_styles')
    if (saved) {
      setSavedStyles(JSON.parse(saved))
    }
  }, [])

  // Update style when sliders change (if a generated style is active)
  useEffect(() => {
    if (currentGeneratedStyle) {
      setCurrentGeneratedStyle({
        ...currentGeneratedStyle,
        adjustments: colorAdjustments
      })
    }
  }, [colorAdjustments])

  // Show loading spinner while checking authentication
  if (loading) {
    return (
      <div className="h-screen w-screen bg-black text-white flex items-center justify-center">
        <div className="flex flex-col items-center space-y-4">
          <Loader2 className="h-8 w-8 animate-spin text-purple-400" />
          <p className="text-gray-400">Loading...</p>
        </div>
      </div>
    )
  }

  // Don't render dashboard if not authenticated (redirect will happen)
  if (!user) {
    return (
      <div className="h-screen w-screen bg-black text-white flex items-center justify-center">
        <div className="flex flex-col items-center space-y-4">
          <Loader2 className="h-8 w-8 animate-spin text-purple-400" />
          <p className="text-gray-400">Redirecting to login...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="h-screen w-screen bg-black text-white overflow-hidden">
      {/* Top Header - Fixed height */}
      <header className="flex items-center justify-between px-6 py-4 border-b border-gray-800 h-[73px] flex-shrink-0">
        <div className="flex items-center space-x-4">
          <Button variant="ghost" size="sm" className="text-gray-400 hover:text-white lg:hidden">
            <Menu className="h-4 w-4" />
          </Button>
          <div className="flex items-center space-x-2">
            <div className="h-6 w-6 rounded bg-gradient-to-br from-purple-500 to-emerald-400" />
            <span className="font-bold text-lg">ColorGrade.io</span>
          </div>
        </div>

        <div className="flex items-center space-x-3">
          <Button variant="ghost" size="sm" className="text-gray-400 hover:text-white hidden sm:flex">
            Install App
          </Button>
          <Button variant="ghost" size="sm" className="text-gray-400 hover:text-white hidden sm:flex">
            Go Pro
          </Button>
          <Button 
            variant="ghost" 
            size="sm" 
            className="text-gray-400 hover:text-white"
            onClick={handleExport}
            disabled={!hasMedia || isExporting}
          >
            {isExporting ? (
              <Loader2 className="h-4 w-4 mr-2 animate-spin" />
            ) : (
              <Download className="h-4 w-4 mr-2" />
            )}
            {isExporting ? 'Exporting...' : 'Export'}
          </Button>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" className="flex items-center space-x-3 h-auto px-3 py-2 rounded-lg">
                            <Avatar className="h-8 w-8">
              <AvatarImage src={user?.user_metadata?.avatar_url || "/placeholder-user.jpg"} alt="User" />
              <AvatarFallback className="bg-gray-700">
                {user?.user_metadata?.full_name 
                  ? user.user_metadata.full_name.split(' ').map((n: string) => n[0]).join('').toUpperCase()
                  : user?.email?.[0].toUpperCase() || 'CG'}
              </AvatarFallback>
            </Avatar>
                <div className="text-left">
                  <p className="text-sm font-medium text-white">
                    {user?.user_metadata?.full_name || user?.email?.split('@')[0] || 'User'}
                  </p>
                  <p className="text-xs text-gray-400">
                    {user?.email || 'No email'}
                  </p>
                </div>
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent className="w-56 bg-gray-900 border-gray-700" align="end">
              <DropdownMenuItem>Profile</DropdownMenuItem>
              <DropdownMenuItem>Settings</DropdownMenuItem>
              <DropdownMenuItem onClick={async () => {
                try {
                  console.log('Starting logout process...')
                  
                  // Clear local storage first
                  localStorage.clear()
                  sessionStorage.clear()
                  
                  // Sign out from Supabase
                await signOut()
                  
                  console.log('Logout complete, redirecting...')
                  
                  // Small delay to ensure auth state has cleared
                  setTimeout(() => {
                    window.location.replace("/auth?logout=true")
                  }, 100)
                  
                } catch (error) {
                  console.error('Error signing out:', error)
                  // Force redirect even if signOut fails
                  setTimeout(() => {
                    window.location.replace("/auth?logout=true")
                  }, 100)
                }
              }}>
                Sign out
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </header>

      {/* Main Content Area - Takes remaining height */}
      <div className="flex h-[calc(100vh-73px)] overflow-hidden">
        {/* Left Sidebar */}
        <nav className={`bg-gray-900/30 border-r border-gray-800 transition-all duration-300 flex-shrink-0 ${
          isNavCollapsed ? 'w-16' : 'w-64'
        }`}>
          <div className="p-4 border-b border-gray-800 flex items-center justify-between">
            {!isNavCollapsed && (
              <div className="flex items-center space-x-2">
                <div className="w-8 h-8 bg-gradient-to-br from-purple-600 to-emerald-600 rounded-lg flex items-center justify-center">
                  <span className="text-white font-bold text-sm">CG</span>
                </div>
                <span className="font-semibold text-white">ColorGrade</span>
              </div>
            )}
            <button
              onClick={() => setIsNavCollapsed(!isNavCollapsed)}
              className="p-2 hover:bg-gray-800 rounded-lg transition-colors"
            >
              <Menu className="w-4 h-4 text-gray-400" />
            </button>
          </div>
          
          <div className="p-4 space-y-2">
            {sidebarItems.map((item) => (
              <button
                key={item.id}
                onClick={() => {
                  setActiveTab(item.id)
                  // Handle specific tab actions
                  if (item.id === 'new-project') {
                    fileInputRef.current?.click()
                  } else if (item.id === 'library') {
                    setShowProjectsModal(true)
                  }
                }}
                className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg transition-colors group ${
                  item.active 
                    ? 'bg-purple-600/20 text-purple-400 border border-purple-600/30' 
                    : 'text-gray-400 hover:text-white hover:bg-gray-800/50'
                }`}
              >
                <item.icon className="w-5 h-5 flex-shrink-0" />
                {!isNavCollapsed && (
                  <span className="truncate">{item.label}</span>
                )}
                {isNavCollapsed && (
                  <div className="fixed left-20 bg-gray-800 text-white px-2 py-1 rounded-md text-sm opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none z-50 whitespace-nowrap">
                    {item.label}
                  </div>
                )}
              </button>
            ))}
          </div>
        </nav>

        {/* Main Content - Flexible, no scroll */}
        <main className="flex-1 flex flex-col bg-gray-950 overflow-hidden">
          {activeTab === 'home' && hasMedia ? (
            <>
              {/* Image Display Area - Takes available space */}
              <div className="flex-1 flex flex-col overflow-hidden">
                {/* Image Container */}
                <div className="flex-1 flex items-center justify-center p-6 bg-black">
                  <div className="relative w-full h-full flex items-center justify-center">
                    {/* Media maintains original aspect ratio with black bars */}
                    {mediaType === 'video' ? (
                      <div className="relative max-w-full max-h-[60vh]">
                        <video
                          src={mediaUrl || "data:image/svg+xml;base64," + btoa(`
                            <svg width="480" height="320" xmlns="http://www.w3.org/2000/svg">
                              <rect width="100%" height="100%" fill="#1F2937"/>
                              <text x="50%" y="45%" text-anchor="middle" fill="#9CA3AF" font-family="Arial" font-size="16">Video Preview</text>
                              <text x="50%" y="55%" text-anchor="middle" fill="#6B7280" font-family="Arial" font-size="12">Upload a video to see it here</text>
                            </svg>
                          `)}
                          className="max-w-full max-h-full object-contain"
                          controls={false}
                          autoPlay={false}
                          onTimeUpdate={(e) => setVideoCurrentTime(e.currentTarget.currentTime)}
                          onLoadedMetadata={(e) => {
                            setVideoDuration(e.currentTarget.duration)
                            setVideoFrameRate(30) // Default, could be extracted from metadata
                          }}
                        />
                        
                        {/* Enhanced Video Controls */}
                        <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 to-transparent p-4">
                          <div className="flex items-center space-x-3 text-white">
                            <Button
                              size="sm"
                              variant="ghost"
                              onClick={() => {
                                const video = document.querySelector('video')
                                if (video) {
                                  if (isPlaying) {
                                    video.pause()
                                  } else {
                                    video.play()
                                  }
                                  setIsPlaying(!isPlaying)
                                }
                              }}
                              className="text-white hover:bg-white/20"
                            >
                              {isPlaying ? <Pause className="h-4 w-4" /> : <Play className="h-4 w-4" />}
                            </Button>
                            
                            <div className="flex-1 flex items-center space-x-2">
                              <span className="text-xs text-gray-300 min-w-[40px]">
                                {Math.floor(videoCurrentTime / 60)}:{(Math.floor(videoCurrentTime % 60)).toString().padStart(2, '0')}
                              </span>
                              
                              <div className="flex-1 bg-gray-600 rounded-full h-1">
                                <div 
                                  className="bg-purple-500 h-1 rounded-full transition-all"
                                  style={{ width: `${(videoCurrentTime / videoDuration) * 100}%` }}
                                />
                              </div>
                              
                              <span className="text-xs text-gray-300 min-w-[40px]">
                                {Math.floor(videoDuration / 60)}:{(Math.floor(videoDuration % 60)).toString().padStart(2, '0')}
                              </span>
                            </div>
                            
                            {videoResolution && (
                              <Badge className="bg-black/60 text-white border-gray-600 text-xs">
                                {videoResolution.width}x{videoResolution.height}
                              </Badge>
                            )}
                          </div>
                          
                          {/* Video Thumbnails Timeline */}
                          {videoThumbnails.length > 0 && (
                            <div className="flex space-x-1 mt-2 overflow-x-auto">
                              {videoThumbnails.map((thumbnail, index) => (
                                <img
                                  key={index}
                                  src={thumbnail}
                                  alt={`Frame ${index}`}
                                  className="w-16 h-9 object-cover rounded border border-gray-600 cursor-pointer hover:border-purple-400 transition-colors"
                                  onClick={() => {
                                    const video = document.querySelector('video')
                                    if (video) {
                                      video.currentTime = (videoDuration / videoThumbnails.length) * index
                                    }
                                  }}
                                />
                              ))}
                            </div>
                          )}
                        </div>
                      </div>
                    ) : (
                      <div className="relative max-w-full max-h-[60vh]">
                        {workflowMode === 'image-repurpose' && originalImageData && processedImageData && originalImageData !== processedImageData ? (
                          // Before/After side-by-side view for Image Repurpose (only when AI has generated a different image)
                          <div className="flex items-center justify-center space-x-4">
                            {/* Before Image */}
                            <div 
                              className={`relative cursor-pointer transition-all duration-300 ${
                                activeImageView === 'before' ? 'scale-100' : 'scale-90 opacity-70'
                              }`}
                              onClick={() => setActiveImageView('before')}
                            >
                              <img
                                src={originalImageData}
                                alt="Before"
                                className="max-w-full max-h-[50vh] object-contain rounded-lg"
                              />
                              <div className="absolute top-2 left-2">
                                <Badge className={`text-xs ${
                                  activeImageView === 'before' 
                                    ? 'bg-emerald-600 text-white border-emerald-500' 
                                    : 'bg-black/80 text-white border-gray-600'
                                }`}>
                                  Before
                                </Badge>
                              </div>
                            </div>

                            {/* Arrow */}
                            <div className="flex-shrink-0">
                              <ChevronRight className="h-8 w-8 text-gray-400" />
                            </div>

                            {/* After Image */}
                            <div 
                              className={`relative cursor-pointer transition-all duration-300 ${
                                activeImageView === 'after' ? 'scale-100' : 'scale-90 opacity-70'
                              }`}
                              onClick={() => setActiveImageView('after')}
                            >
                              <img
                                src={processedImageData}
                                alt="After"
                                className="max-w-full max-h-[50vh] object-contain rounded-lg"
                              />
                              <div className="absolute top-2 left-2">
                                <Badge className={`text-xs ${
                                  activeImageView === 'after' 
                                    ? 'bg-emerald-600 text-white border-emerald-500' 
                                    : 'bg-black/80 text-white border-gray-600'
                                }`}>
                                  After
                                </Badge>
                              </div>
                            </div>
                          </div>
                        ) : workflowMode === 'color-grade' && showDiagonalSplit && originalImageData && processedImageData ? (
                          // Diagonal split view for Color Grade
                          <div className="relative inline-block">
                            {/* Processed image (full) */}
                            <img
                              src={processedImageData}
                              alt="Processed"
                              className="max-w-full max-h-[60vh] object-contain"
                            />
                            {/* Original image (clipped diagonally from bottom-left to top-right) */}
                            <div className="absolute inset-0">
                              <img
                                src={originalImageData}
                                alt="Original"
                                className="max-w-full max-h-[60vh] object-contain"
                                style={{
                                  clipPath: 'polygon(0 100%, 0 0, 100% 0)'
                                }}
                              />
                            </div>
                            {/* Diagonal line from bottom-left to top-right */}
                            <div className="absolute inset-0 pointer-events-none">
                              <svg className="w-full h-full" viewBox="0 0 100 100" preserveAspectRatio="none">
                                <line x1="0" y1="100" x2="100" y2="0" stroke="#ffffff" strokeWidth="0.3" opacity="0.8"/>
                              </svg>
                            </div>
                            {/* Labels */}
                            <div className="absolute top-2 right-2">
                              <Badge className="bg-black/80 text-white border-gray-600 text-xs">Original</Badge>
                            </div>
                            <div className="absolute bottom-2 left-2">
                              <Badge className="bg-black/80 text-white border-gray-600 text-xs">Processed</Badge>
                            </div>
                          </div>
                        ) : (
                          // Single image view (centered until before/after available)
                          <div className="flex items-center justify-center">
                            <img
                              src={mediaUrl || "data:image/svg+xml;base64," + btoa(`
                                <svg width="480" height="600" xmlns="http://www.w3.org/2000/svg">
                                  <rect width="100%" height="100%" fill="#1F2937"/>
                                  <text x="50%" y="45%" text-anchor="middle" fill="#9CA3AF" font-family="Arial" font-size="18">Image Preview</text>
                                  <text x="50%" y="55%" text-anchor="middle" fill="#6B7280" font-family="Arial" font-size="14">Upload an image to see it here</text>
                                </svg>
                              `)}
                              alt="Media"
                              className="max-w-full max-h-[60vh] object-contain"
                            />
                          </div>
                        )}
                      </div>
                    )}
                    
                    {showOriginal && (
                      <div className="absolute top-4 left-4">
                        <Badge className="bg-black/80 text-white border-gray-600">Original</Badge>
                      </div>
                    )}
                    

                    
                    {/* Processing Overlay */}
                    {isProcessing && (
                      <div className="absolute inset-0 bg-black/50 flex items-center justify-center">
                        <div className="bg-gray-900/90 rounded-lg p-6 flex items-center space-x-4">
                          <Loader2 className="h-6 w-6 animate-spin text-purple-400" />
                          <span className="text-white">Processing with AI...</span>
                        </div>
                      </div>
                    )}

                    {/* Adjustment Processing Indicator */}
                    {isAdjusting && (
                      <div className="absolute bottom-4 right-4">
                        <div className="bg-gray-900/90 rounded-lg px-3 py-2 flex items-center space-x-2">
                          <Loader2 className="h-3 w-3 animate-spin text-blue-400" />
                          <span className="text-white text-xs">Applying...</span>
                        </div>
                      </div>
                    )}
                  </div>
                </div>

                {/* Image Control Buttons */}
                {hasMedia && (
                  <div className="border-t border-gray-800 p-3 bg-gray-900/30">
                    <div className="flex justify-between items-center">
                      {/* Left Corner - Close & Help */}
                      <div className="flex space-x-2">
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={handleCloseImage}
                          className="h-8 w-8 p-0 border-gray-600 text-gray-400 hover:text-white hover:border-red-500 hover:text-red-400"
                          title="Close image and return to upload"
                        >
                          <X className="h-4 w-4" />
                        </Button>
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => setShowHelpHints(!showHelpHints)}
                          className={`h-8 w-8 p-0 border-gray-600 hover:border-blue-500 ${
                            showHelpHints ? 'text-blue-400 border-blue-500' : 'text-gray-400 hover:text-blue-400'
                          }`}
                          title="Show editing hints and tips"
                        >
                          <HelpIcon className="h-4 w-4" />
                        </Button>
                      </div>

                      {/* Center - Workflow Mode Toggle & Preset Styles */}
                      <div className="flex items-center space-x-2">
                        <div className="flex items-center bg-gray-800/50 border border-gray-700 rounded-lg p-1">
                          <Button
                            size="sm"
                            variant={workflowMode === 'color-grade' ? 'default' : 'ghost'}
                            onClick={() => handleWorkflowModeChange('color-grade')}
                            className={`h-7 px-3 text-xs font-medium rounded-md transition-all ${
                              workflowMode === 'color-grade'
                                ? 'bg-purple-600 text-white shadow-sm'
                                : 'text-gray-400 hover:text-white hover:bg-gray-700/50'
                            }`}
                          >
                            <Sliders className="h-3 w-3 mr-1.5" />
                            Color Grade
                          </Button>
                          <Button
                            size="sm"
                            variant={workflowMode === 'image-repurpose' ? 'default' : 'ghost'}
                            onClick={() => handleWorkflowModeChange('image-repurpose')}
                            className={`h-7 px-3 text-xs font-medium rounded-md transition-all ${
                              workflowMode === 'image-repurpose'
                                ? 'bg-emerald-600 text-white shadow-sm'
                                : 'text-gray-400 hover:text-white hover:bg-gray-700/50'
                            }`}
                          >
                            <Sparkles className="h-3 w-3 mr-1.5" />
                            Image Repurpose
                          </Button>
                        </div>

                        {/* Preset Styles Button - Available for both modes */}
                        {hasMedia && (
                          <div className="flex space-x-2">
                            <div className="relative">
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => setShowPromptStyles(!showPromptStyles)}
                                className={`h-7 px-3 text-xs border-gray-600 transition-all ${
                                  showPromptStyles || selectedPromptStyles.length > 0
                                    ? workflowMode === 'color-grade' 
                                      ? 'text-purple-400 border-purple-500 bg-purple-500/10'
                                      : 'text-emerald-400 border-emerald-500 bg-emerald-500/10'
                                    : workflowMode === 'color-grade'
                                      ? 'text-gray-400 hover:text-purple-400 hover:border-purple-500'
                                      : 'text-gray-400 hover:text-emerald-400 hover:border-emerald-500'
                                }`}
                              >
                                <Filter className="h-3 w-3 mr-1.5" />
                                Styles
                                {selectedPromptStyles.length > 0 && (
                                  <Badge className={`ml-1.5 text-white text-xs h-4 w-4 p-0 flex items-center justify-center ${
                                    workflowMode === 'color-grade' ? 'bg-purple-600' : 'bg-emerald-600'
                                  }`}>
                                    {selectedPromptStyles.length}
                                  </Badge>
                                )}
                                {showPromptStyles ? (
                                  <ChevronUp className="h-3 w-3 ml-1" />
                                ) : (
                                  <ChevronDown className="h-3 w-3 ml-1" />
                                )}
                              </Button>
                            </div>

                            {/* Main Focus Button - Only for Image Repurpose */}
                            {workflowMode === 'image-repurpose' && (
                              <div className="relative">
                                <Button
                                  size="sm"
                                  variant="outline"
                                  onClick={() => setShowMainFocus(!showMainFocus)}
                                  className={`h-7 px-3 text-xs border-gray-600 transition-all ${
                                    showMainFocus || selectedMainFocus.length > 0
                                      ? 'text-emerald-400 border-emerald-500 bg-emerald-500/10'
                                      : 'text-gray-400 hover:text-emerald-400 hover:border-emerald-500'
                                  }`}
                                >
                                  <User className="h-3 w-3 mr-1.5" />
                                  Focus
                                  {selectedMainFocus.length > 0 && (
                                    <Badge className="ml-1.5 bg-emerald-600 text-white text-xs h-4 w-4 p-0 flex items-center justify-center">
                                      {selectedMainFocus.length}
                                    </Badge>
                                  )}
                                  {showMainFocus ? (
                                    <ChevronUp className="h-3 w-3 ml-1" />
                                  ) : (
                                    <ChevronDown className="h-3 w-3 ml-1" />
                                  )}
                                </Button>
                              </div>
                            )}
                          </div>
                        )}
                      </div>

                      {/* Right Corner - Before/After & Color Palette */}
                      <div className="flex space-x-2">
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => setShowDiagonalSplit(!showDiagonalSplit)}
                          className={`h-8 w-8 p-0 border-gray-600 hover:border-purple-500 ${
                            showDiagonalSplit ? 'text-purple-400 border-purple-500' : 'text-gray-400 hover:text-purple-400'
                          }`}
                          title="Toggle diagonal before/after split"
                        >
                          <Split className="h-4 w-4" />
                        </Button>
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={handleExtractColors}
                          className={`h-8 w-8 p-0 border-gray-600 hover:border-green-500 ${
                            showColorPalette ? 'text-green-400 border-green-500' : 'text-gray-400 hover:text-green-400'
                          }`}
                          title="Extract color palette from image"
                        >
                          <PaletteIcon className="h-4 w-4" />
                        </Button>
                      </div>
                    </div>

                    {/* Help Hints Panel */}
                    {showHelpHints && (
                      <div className="mt-3 p-3 bg-blue-900/20 border border-blue-500/30 rounded-lg">
                        <h4 className="text-sm font-medium text-blue-400 mb-2">✨ Quick Tips</h4>
                        <div className="space-y-1 text-xs text-blue-300">
                          <div>• Try prompts like "cinematic sunset", "moody noir", or "vintage film"</div>
                          <div>• Use the sliders to fine-tune any adjustment in real-time</div>
                          <div>• Apply LUT presets for instant professional looks</div>
                          <div>• Export your settings as .cube files for other software</div>
                          <div>• Click the diagonal split to compare before/after</div>
                        </div>
                      </div>
                    )}


                  </div>
                )}

                {/* AI Summary Display */}
                {aiSummary && (
                  <div className="border-t border-gray-800 p-3 bg-green-900/20 border-green-500/30">
                    <div className="flex items-start space-x-2">
                      <div className="flex-shrink-0 mt-0.5">
                        <div className="h-2 w-2 bg-green-400 rounded-full animate-pulse"></div>
                      </div>
                      <div className="flex-1">
                        <div className="text-xs font-medium text-green-400 mb-1">AI Analysis Complete</div>
                        <div className="text-sm text-green-200">{aiSummary}</div>
                      </div>
                      <Button
                        size="sm"
                        variant="ghost"
                        className="h-6 w-6 p-0 text-green-400 hover:text-green-300"
                        onClick={() => setAiSummary('')}
                        title="Dismiss"
                      >
                        <X className="h-3 w-3" />
                      </Button>
                    </div>
                  </div>
                )}

                {/* AI Prompt Interface */}
                <div className="border-t border-gray-800 p-4 bg-gray-900/50 flex-shrink-0">
                  <div className="flex space-x-3">
                    <div className="flex-1">
                      <div className="relative">
                        <Textarea
                          placeholder={
                            workflowMode === 'color-grade'
                              ? "Describe the color grading you want... (e.g., 'cinematic sunset glow', 'moody film noir', 'make this warmer')"
                              : "Describe the new image you want to create... (e.g., 'put me in a luxury jet', 'standing in a cyberpunk city', 'sitting by a tropical beach')"
                          }
                          value={prompt}
                          onChange={(e) => setPrompt(e.target.value)}
                          className="min-h-[60px] bg-gray-800/50 border-gray-700 text-white placeholder-gray-400 resize-none pr-12"
                          onKeyDown={(e) => {
                            if (e.key === 'Enter' && !e.shiftKey) {
                              e.preventDefault()
                              handleGenerateLook()
                            }
                          }}
                        />
                        <Button
                          onClick={handleGenerateLook}
                          disabled={!prompt.trim() || isProcessing}
                          className={`absolute bottom-2 right-2 h-8 w-8 p-0 disabled:opacity-50 ${
                            workflowMode === 'color-grade'
                              ? 'bg-purple-600 hover:bg-purple-700'
                              : 'bg-emerald-600 hover:bg-emerald-700'
                          }`}
                        >
                          {isProcessing ? (
                            <Loader2 className="h-4 w-4 animate-spin" />
                          ) : workflowMode === 'color-grade' ? (
                            <Wand2 className="h-4 w-4" />
                          ) : (
                            <Sparkles className="h-4 w-4" />
                          )}
                        </Button>
                      </div>
                      
                      {/* Selected Context Indicators */}
                      {(selectedPromptStyles.length > 0 || selectedMainFocus) && (
                        <div className="flex flex-wrap gap-2 mt-2 p-2 bg-gray-800/30 rounded-lg border border-gray-700/50">
                          {selectedPromptStyles.length > 0 && (
                            <div className={`flex items-center space-x-1 px-2 py-1 rounded text-xs ${
                              workflowMode === 'color-grade' 
                                ? 'bg-purple-600/20 text-purple-300 border border-purple-500/30'
                                : 'bg-emerald-600/20 text-emerald-300 border border-emerald-500/30'
                            }`}>
                              <Filter className="h-3 w-3" />
                              <span>{selectedPromptStyles.length} style{selectedPromptStyles.length > 1 ? 's' : ''}</span>
                            </div>
                          )}
                          {selectedMainFocus.length > 0 && workflowMode === 'image-repurpose' && (
                            <div className="flex items-center space-x-1 px-2 py-1 rounded text-xs bg-emerald-600/20 text-emerald-300 border border-emerald-500/30">
                              <User className="h-3 w-3" />
                              <span>Focus: {selectedMainFocus.join(', ')}</span>
                            </div>
                          )}
                        </div>
                      )}
                      
                      {/* Prompt Suggestions and History */}
                      <div className="space-y-2 mt-2">
                        {/* Recent Prompts */}
                        {promptHistory.length > 0 && (
                          <div>
                            <div className="text-xs text-gray-500 mb-1">Recent</div>
                            <div className="flex flex-wrap gap-2">
                              {promptHistory.slice(0, 3).map((historyPrompt, index) => (
                                <Button
                                  key={index}
                                  variant="outline"
                                  size="sm"
                                  className="text-xs h-6 px-2 border-purple-600/30 text-purple-400 hover:text-white hover:border-purple-500"
                                  onClick={() => setPrompt(historyPrompt)}
                                >
                                  <Clock className="h-2 w-2 mr-1" />
                                  {historyPrompt.length > 20 ? historyPrompt.substring(0, 20) + '...' : historyPrompt}
                                </Button>
                              ))}
                            </div>
                          </div>
                        )}
                        
                        {/* Trending Prompts */}
                        <div>
                          <div className="text-xs text-gray-500 mb-1">Trending</div>
                          <div className="flex flex-wrap gap-2">
                            {(workflowMode === 'color-grade' 
                              ? [
                                  "Cinematic orange & teal",
                                  "Vintage film look", 
                                  "Moody black & white",
                                  "Golden hour warmth"
                                ]
                              : [
                                  "Standing in a luxury jet",
                                  "Sitting by tropical beach",
                                  "Walking through cyberpunk city",
                                  "In a cozy coffee shop"
                                ]
                            ).map((trendingPrompt) => (
                              <Button
                                key={trendingPrompt}
                                variant="outline"
                                size="sm"
                                className={`text-xs h-6 px-2 border-gray-600 text-gray-400 hover:text-white ${
                                  workflowMode === 'color-grade' 
                                    ? 'hover:border-purple-500' 
                                    : 'hover:border-emerald-500'
                                }`}
                                onClick={() => setPrompt(trendingPrompt)}
                              >
                                <TrendingUp className="h-2 w-2 mr-1" />
                                {trendingPrompt}
                              </Button>
                            ))}
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </>
          ) : activeTab === 'library' ? (
            /* Library View */
            <div className="flex-1 p-6">
              <div className="max-w-6xl mx-auto">
                <div className="flex items-center justify-between mb-6">
                  <h1 className="text-2xl font-bold text-white">Project Library</h1>
                  <Button 
                    className="bg-gradient-to-r from-purple-600 to-emerald-500 hover:from-purple-700 hover:to-emerald-600"
                    onClick={() => setShowProjectsModal(true)}
                  >
                    <Plus className="h-4 w-4 mr-2" />
                    New Project
                  </Button>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
                  {projects.map((project) => (
                    <Card 
                      key={project.id}
                      className="bg-gray-800/50 border-gray-700 hover:bg-gray-800/70 cursor-pointer transition-all duration-200 hover:scale-[1.02]"
                      onClick={() => handleProjectClick(project.id)}
                    >
                      <CardContent className="p-0">
                        <div className="relative aspect-video bg-gray-700 rounded-t-lg overflow-hidden">
                          <img 
                            src={project.thumbnail}
                            alt={project.name}
                            className="w-full h-full object-cover"
                          />
                          
                          <div className="absolute top-2 left-2">
                            <Badge className="bg-black/80 text-white border-gray-600 text-xs px-1.5 py-0.5">
                              {project.type === 'video' ? (
                                <Video className="h-2.5 w-2.5 mr-0.5" />
                              ) : (
                                <Camera className="h-2.5 w-2.5 mr-0.5" />
                              )}
                              {project.type}
                            </Badge>
                          </div>
                          
                          {project.isStarred && (
                            <div className="absolute top-2 right-2">
                              <Star className="h-3 w-3 text-yellow-400 fill-current" />
                            </div>
                          )}
                        </div>
                        
                        <div className="p-3 space-y-2">
                          <div className="flex items-center justify-between">
                            <h3 className="font-medium text-white truncate text-sm">{project.name}</h3>
                          </div>
                          <div className="flex items-center space-x-1 text-xs text-gray-400">
                            <Clock className="h-2.5 w-2.5" />
                            <span>{project.lastModified}</span>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </div>
            </div>
          ) : activeTab === 'lut-presets' ? (
            /* LUT Presets View */
            <div className="flex-1 p-6">
              <div className="max-w-4xl mx-auto">
                <h1 className="text-2xl font-bold text-white mb-6">LUT Presets</h1>
                
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {lutPresets.map((preset, index) => (
                    <Card 
                      key={index}
                      className="bg-gray-800/50 border-gray-700 hover:bg-gray-800/70 cursor-pointer transition-all duration-200"
                      onClick={() => {
                        setSelectedPreset(preset.name)
                        setActiveTab('home')
                        if (!hasMedia) {
                          setShowProjectsModal(true)
                        }
                      }}
                    >
                      <CardContent className="p-4">
                        <div className={`w-full h-32 rounded-lg bg-gradient-to-r ${preset.color} mb-4 flex items-center justify-center`}>
                          <div className="text-white font-semibold">{preset.name}</div>
                        </div>
                        <div className="space-y-2">
                          <h3 className="font-medium text-white">{preset.name}</h3>
                          <div className="flex justify-between text-sm text-gray-400">
                            <span>Strength: {preset.strength}%</span>
                            <span>Popular</span>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </div>
            </div>
          ) : activeTab === 'account' ? (
            /* Account View */
            <div className="flex-1 p-6">
              <div className="max-w-2xl mx-auto">
                <h1 className="text-2xl font-bold text-white mb-6">Account Settings</h1>
                
                <div className="space-y-6">
                  <Card className="bg-gray-800/50 border-gray-700">
                    <CardContent className="p-6">
                      <h2 className="text-lg font-semibold text-white mb-4">Profile</h2>
                      <div className="space-y-4">
                        <div className="flex items-center space-x-4">
                                      <Avatar className="h-16 w-16">
              <AvatarImage src={user?.user_metadata?.avatar_url} alt="User" />
              <AvatarFallback className="bg-purple-600 text-white text-xl">
                {user?.user_metadata?.full_name 
                  ? user.user_metadata.full_name.split(' ').map((n: string) => n[0]).join('').toUpperCase()
                  : user?.email?.[0].toUpperCase() || 'CG'}
              </AvatarFallback>
            </Avatar>
                          <div>
                            <div className="text-white font-medium">ColorGrade User</div>
                            <div className="text-gray-400">user@colorgrade.io</div>
                          </div>
                        </div>
                                                  {/* Export Queue Status */}
                          {exportQueue.length > 0 && (
                            <div className="pt-4 border-t border-gray-700">
                              <h4 className="text-sm font-medium text-white mb-2">Export Queue</h4>
                              <div className="space-y-2">
                                {exportQueue.slice(0, 3).map((job) => (
                                  <div key={job.id} className="bg-gray-800/50 rounded-lg p-2 text-xs">
                                    <div className="flex items-center justify-between mb-1">
                                      <span className="text-gray-300 truncate">{job.name}</span>
                                      <Badge className={`text-xs ${
                                        job.status === 'completed' ? 'bg-green-600' :
                                        job.status === 'processing' ? 'bg-blue-600' : 'bg-gray-600'
                                      }`}>
                                        {job.status}
                                      </Badge>
                                    </div>
                                    {job.status !== 'completed' && (
                                      <Progress value={job.progress} className="h-1" />
                                    )}
                                  </div>
                                ))}
                              </div>
                            </div>
                          )}

                          {/* Batch Processing Status */}
                          {batchProcessing && (
                            <div className="pt-4 border-t border-gray-700">
                              <h4 className="text-sm font-medium text-white mb-2">Batch Processing</h4>
                              <div className="bg-gray-800/50 rounded-lg p-3">
                                <div className="flex items-center space-x-2 mb-2">
                                  <Loader2 className="h-4 w-4 animate-spin text-purple-400" />
                                  <span className="text-sm text-gray-300">Processing files...</span>
                                </div>
                                <Progress value={processingProgress} className="h-2" />
                                <span className="text-xs text-gray-400 mt-1 block">
                                  {Math.round(processingProgress)}% complete
                                </span>
                              </div>
                            </div>
                          )}

                          {/* Project Templates */}
                          {projectTemplates.length > 0 && (
                            <div className="pt-4 border-t border-gray-700">
                              <h4 className="text-sm font-medium text-white mb-2">Saved Templates</h4>
                              <div className="space-y-1">
                                {projectTemplates.slice(0, 3).map((template, index) => (
                                  <Button
                                    key={index}
                                    variant="ghost"
                                    size="sm"
                                    onClick={() => loadTemplate(template)}
                                    className="w-full justify-start text-gray-300 hover:text-white text-xs"
                                  >
                                    <Sparkles className="h-3 w-3 mr-2" />
                                    {template}
                                  </Button>
                                ))}
                              </div>
                            </div>
                          )}

                          <div className="pt-4 border-t border-gray-700">
                            <Button 
                              onClick={navigateToAuth}
                              className="w-full bg-gradient-to-r from-purple-600 to-emerald-500 hover:from-purple-700 hover:to-emerald-600"
                            >
                              <User className="h-4 w-4 mr-2" />
                              Try Login/Signup Page
                            </Button>
                          </div>
                      </div>
                    </CardContent>
                  </Card>
                  
                  <Card className="bg-gray-800/50 border-gray-700">
                    <CardContent className="p-6">
                      <h2 className="text-lg font-semibold text-white mb-4">Subscription</h2>
                      <div className="space-y-4">
                        <div className="flex justify-between items-center">
                          <span className="text-gray-300">Current Plan</span>
                          <Badge className="bg-purple-600 text-white">Free Tier</Badge>
                        </div>
                        <div className="flex justify-between items-center">
                          <span className="text-gray-300">Usage this month</span>
                          <span className="text-white">3 / 10 prompts</span>
                        </div>
                        <Progress value={30} className="w-full" />
                        <Button className="w-full bg-gradient-to-r from-purple-600 to-emerald-500 hover:from-purple-700 hover:to-emerald-600">
                          Upgrade to Pro
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              </div>
            </div>
          ) : activeTab === 'explore' ? (
            /* Explore View */
            <div className="flex-1 p-6">
              <div className="max-w-6xl mx-auto">
                <div className="flex items-center justify-between mb-6">
                  <h1 className="text-2xl font-bold text-white">Explore Community</h1>
                  <Button variant="outline" className="border-gray-600">
                    <TrendingUp className="h-4 w-4 mr-2" />
                    Trending
                  </Button>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {[
                    { title: "Cyberpunk Streets", prompt: "Neon-lit streets with purple and blue tones", author: "DigitalArtist", likes: 234 },
                    { title: "Golden Hour Magic", prompt: "Warm golden sunset with soft highlights", author: "PhotoPro", likes: 189 },
                    { title: "Film Noir Classic", prompt: "High contrast black and white with dramatic shadows", author: "VintageVibes", likes: 156 },
                    { title: "Tropical Paradise", prompt: "Vibrant blues and greens with enhanced saturation", author: "TravelShooter", likes: 203 },
                    { title: "Moody Portrait", prompt: "Desaturated with cool blue undertones", author: "PortraitMaster", likes: 178 },
                    { title: "Sunrise Landscape", prompt: "Soft orange and pink morning light", author: "NatureLover", likes: 145 },
                  ].map((item, index) => (
                    <Card 
                      key={index}
                      className="bg-gray-800/50 border-gray-700 hover:bg-gray-800/70 cursor-pointer transition-all duration-200"
                      onClick={() => {
                        setPrompt(item.prompt)
                        setActiveTab('home')
                      }}
                    >
                      <CardContent className="p-4">
                        <div className="w-full h-32 rounded-lg bg-gradient-to-br from-purple-500 to-emerald-400 mb-4 flex items-center justify-center">
                          <div className="text-white font-semibold text-center px-2">{item.title}</div>
                        </div>
                        <div className="space-y-2">
                          <h3 className="font-medium text-white">{item.title}</h3>
                          <p className="text-sm text-gray-400 line-clamp-2">{item.prompt}</p>
                          <div className="flex justify-between items-center text-xs text-gray-500">
                            <span>by {item.author}</span>
                            <div className="flex items-center space-x-1">
                              <Star className="h-3 w-3" />
                              <span>{item.likes}</span>
                            </div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </div>
            </div>
          ) : activeTab === 'prompt-vs-result' ? (
            /* Prompt vs Result View */
            <div className="flex-1 p-6">
              <div className="max-w-4xl mx-auto">
                <h1 className="text-2xl font-bold text-white mb-6">Prompt vs Result</h1>
                
                <div className="space-y-6">
                  <Card className="bg-gray-800/50 border-gray-700">
                    <CardContent className="p-6">
                      <h2 className="text-lg font-semibold text-white mb-4">Create Comparison</h2>
                      <p className="text-gray-400 mb-4">
                        Show off your AI color grading results with before/after comparisons perfect for social media.
                      </p>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="aspect-video bg-gray-700 rounded-lg flex items-center justify-center">
                          <div className="text-center">
                            <ImageIcon className="h-12 w-12 text-gray-400 mx-auto mb-2" />
                            <div className="text-gray-400">Before</div>
                          </div>
                        </div>
                        <div className="aspect-video bg-gray-700 rounded-lg flex items-center justify-center">
                          <div className="text-center">
                            <Sparkles className="h-12 w-12 text-purple-400 mx-auto mb-2" />
                            <div className="text-purple-400">After</div>
                          </div>
                        </div>
                      </div>
                      <div className="mt-4">
                        <Button className="w-full bg-gradient-to-r from-purple-600 to-emerald-500 hover:from-purple-700 hover:to-emerald-600">
                          Create Comparison
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                  
                  {promptHistory.length > 0 && (
                    <Card className="bg-gray-800/50 border-gray-700">
                      <CardContent className="p-6">
                        <h2 className="text-lg font-semibold text-white mb-4">Recent Prompts</h2>
                        <div className="space-y-2">
                          {promptHistory.slice(0, 5).map((historyPrompt, index) => (
                            <div 
                              key={index}
                              className="flex items-center justify-between p-3 bg-gray-700/50 rounded-lg cursor-pointer hover:bg-gray-700"
                              onClick={() => {
                                setPrompt(historyPrompt)
                                setActiveTab('home')
                              }}
                            >
                              <span className="text-gray-300 text-sm">{historyPrompt}</span>
                              <Button size="sm" variant="ghost">
                                <Wand2 className="h-3 w-3" />
                              </Button>
                            </div>
                          ))}
                        </div>
                      </CardContent>
                    </Card>
                  )}
                </div>
              </div>
            </div>
          ) : activeTab === 'support' ? (
            /* Support View */
            <div className="flex-1 p-6">
              <div className="max-w-2xl mx-auto">
                <h1 className="text-2xl font-bold text-white mb-6">Support & Help</h1>
                
                <div className="space-y-6">
                  <Card className="bg-gray-800/50 border-gray-700">
                    <CardContent className="p-6">
                      <h2 className="text-lg font-semibold text-white mb-4">Quick Help</h2>
                      <div className="space-y-4">
                        {[
                          { title: "How to upload media", desc: "Drag and drop or click browse to upload images and videos" },
                          { title: "Writing effective prompts", desc: "Be specific about mood, lighting, and style preferences" },
                          { title: "Using LUT presets", desc: "Apply professional color grades with one click" },
                          { title: "Exporting your work", desc: "Download processed images and videos in high quality" },
                        ].map((item, index) => (
                          <div key={index} className="border-l-2 border-purple-500 pl-4">
                            <h3 className="font-medium text-white">{item.title}</h3>
                            <p className="text-sm text-gray-400">{item.desc}</p>
                          </div>
                        ))}
                      </div>
                    </CardContent>
                  </Card>
                  
                  <Card className="bg-gray-800/50 border-gray-700">
                    <CardContent className="p-6">
                      <h2 className="text-lg font-semibold text-white mb-4">Contact Support</h2>
                      <div className="space-y-4">
                        <Button className="w-full justify-start" variant="outline">
                          <HelpCircle className="h-4 w-4 mr-2" />
                          Open Help Center
                        </Button>
                        <Button className="w-full justify-start" variant="outline">
                          <User className="h-4 w-4 mr-2" />
                          Contact Support Team
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              </div>
            </div>
          ) : (
            /* Default/Home Empty State with Drag & Drop */
            <div 
              className="flex-1 flex items-center justify-center"
              onDragOver={handleDragOver}
              onDragLeave={handleDragLeave}
              onDrop={handleDrop}
            >
              <div className="text-center space-y-8 max-w-md">
                {uploadProgress > 0 && uploadProgress < 100 ? (
                  /* Upload Progress */
                  <div className="space-y-4">
                    <div className="h-32 w-32 mx-auto rounded-2xl bg-gradient-to-br from-gray-800 to-gray-900 flex items-center justify-center border border-gray-700">
                      <Loader2 className="h-16 w-16 text-purple-400 animate-spin" />
                    </div>
                    <div className="space-y-2">
                      <h2 className="text-xl font-semibold text-white">Uploading...</h2>
                      <Progress value={uploadProgress} className="w-full" />
                      <p className="text-sm text-gray-400">{uploadProgress}% complete</p>
                    </div>
                  </div>
                ) : isConverting ? (
                  /* HEIC Conversion Progress */
                  <div className="space-y-4">
                    <div className="h-32 w-32 mx-auto rounded-2xl bg-gradient-to-br from-emerald-800 to-emerald-900 flex items-center justify-center border border-emerald-700">
                      <Loader2 className="h-16 w-16 text-emerald-400 animate-spin" />
                    </div>
                    <div className="space-y-2">
                      <h2 className="text-xl font-semibold text-white">Converting HEIC...</h2>
                      <p className="text-sm text-gray-400">Please wait while we convert your image</p>
                    </div>
                  </div>
                ) : (
                  /* Drag & Drop Interface */
                  <div className={`border-2 border-dashed rounded-3xl p-12 transition-all duration-200 ${
                    isDragging 
                      ? 'border-purple-400 bg-purple-500/10 scale-105' 
                      : 'border-gray-600 hover:border-gray-500'
                  }`}>
                    <div className="relative">
                      <div className="h-32 w-32 mx-auto rounded-2xl bg-gradient-to-br from-gray-800 to-gray-900 flex items-center justify-center border border-gray-700">
                        {isDragging ? (
                          <Upload className="h-16 w-16 text-purple-400" />
                        ) : (
                          <ImageIcon className="h-16 w-16 text-gray-400" />
                        )}
                      </div>
                      <div className="absolute -top-2 -right-2 h-8 w-8 rounded-full bg-gradient-to-br from-purple-500 to-emerald-400 flex items-center justify-center">
                        <Plus className="h-4 w-4 text-white" />
                      </div>
                    </div>
                    
                    <div className="space-y-3">
                      <h2 className="text-2xl font-semibold text-white">
                        {isDragging ? 'Drop to Upload' : 'Start Creating'}
                      </h2>
                      <p className="text-gray-400 leading-relaxed">
                        {isDragging 
                          ? 'Release to upload your media file'
                          : 'Drag & drop files here or click to browse'
                        }
                      </p>
                      <div className="text-xs text-gray-500">
                        Supports: JPG, PNG, WebP, HEIC, MP4, MOV • Max 100MB
                      </div>
                    </div>
                    
                    {!isDragging && (
                      <div className="space-y-3">
                        <Button 
                          className="w-full bg-gradient-to-r from-purple-600 to-emerald-500 hover:from-purple-700 hover:to-emerald-600 h-12 text-base font-medium" 
                          onClick={() => setShowProjectsModal(true)}
                        >
                          <Plus className="h-5 w-5 mr-2" />
                          Create New Project
                        </Button>
                        
                        <Button 
                          variant="outline" 
                          className="w-full border-gray-600 hover:bg-gray-800 h-12 text-base"
                          onClick={handleFileUpload}
                        >
                          <Upload className="h-5 w-5 mr-2" />
                          Browse Files
                        </Button>
                      </div>
                    )}
                    
                    <div className="flex items-center justify-center space-x-6 pt-4 text-sm text-gray-500">
                      <div className="flex items-center space-x-2">
                        <FileImage className="h-4 w-4" />
                        <span>Photos</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <FileVideo className="h-4 w-4" />
                        <span>Videos</span>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          )}
        </main>

        {/* Right Sidebar - Fixed width, SCROLLABLE content */}
        <aside className="w-80 border-l border-gray-800 bg-gray-900/20 hidden xl:block flex-shrink-0">
          <div className="h-full overflow-y-auto p-4">
            {/* Header */}
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center space-x-2">
                <Settings className="h-4 w-4 text-gray-400" />
                <span className="text-sm text-gray-400">Controls</span>
              </div>
              <Badge variant="outline" className="text-xs border-gray-600 text-gray-400">
                sRGB
              </Badge>
            </div>

            {/* Export Button */}
            {hasMedia && (
              <div className="mb-6">
                <Button 
                  onClick={handleExport}
                  className="w-full bg-gradient-to-r from-purple-600 to-emerald-500 hover:from-purple-700 hover:to-emerald-600"
                >
                  <Download className="h-4 w-4 mr-2" />
                  Export {mediaType === 'video' ? 'Video' : 'Image'}
                </Button>
              </div>
            )}

            {/* Tools */}
            <div className="space-y-1 mb-6">
              <Button
                variant="ghost"
                className="w-full justify-start h-8 bg-purple-500/20 text-purple-400 border border-purple-500/30"
                onClick={() => {
                  // Focus on the prompt input field
                  const promptInput = document.querySelector('textarea[placeholder*="prompt"]') as HTMLTextAreaElement
                  if (promptInput) {
                    promptInput.focus()
                    promptInput.scrollIntoView({ behavior: 'smooth', block: 'center' })
                  }
                }}
                title="Jump to AI prompt input"
              >
                <Wand2 className="h-4 w-4 mr-3" />
                AI Prompt
              </Button>
              <Button
                variant="ghost" 
                className="w-full justify-start h-8 text-gray-400 hover:text-white hover:bg-gray-800/50"
              >
                <Palette className="h-4 w-4 mr-3" />
                Color Match
              </Button>
              <Button
                variant="ghost"
                className="w-full justify-start h-8 text-gray-400 hover:text-white hover:bg-gray-800/50"
              >
                <Sliders className="h-4 w-4 mr-3" />
                Balance
              </Button>
            </div>

            {/* Presets & Favorites Container */}
            <div className="space-y-3 mb-6">
              {/* Toggle Header */}
              <div className="flex items-center bg-gray-800/30 rounded-lg p-1">
                <Button
                  variant={presetViewMode === 'presets' ? 'default' : 'ghost'}
                  size="sm"
                  className={`flex-1 h-7 text-xs ${
                    presetViewMode === 'presets'
                      ? 'bg-gray-700 text-white'
                      : 'text-gray-400 hover:text-white hover:bg-gray-800/50'
                  }`}
                  onClick={() => setPresetViewMode('presets')}
                >
                  <Palette className="h-3 w-3 mr-1.5" />
                  Presets
                </Button>
                <Button
                  variant={presetViewMode === 'favorites' ? 'default' : 'ghost'}
                  size="sm"
                  className={`flex-1 h-7 text-xs ${
                    presetViewMode === 'favorites'
                      ? 'bg-gray-700 text-white'
                      : 'text-gray-400 hover:text-white hover:bg-gray-800/50'
                  }`}
                  onClick={() => setPresetViewMode('favorites')}
                >
                  <Star className="h-3 w-3 mr-1.5" />
                  Favorites
                </Button>
              </div>

              {/* Presets Grid */}
              {presetViewMode === 'presets' && (
                <div className="grid grid-cols-3 gap-2">
                  {defaultPresets.map((preset) => (
                    <button
                      key={preset.id}
                      onClick={() => loadPresetStyle(preset.name)}
                      className="group bg-gray-800/40 hover:bg-gray-800/70 border border-gray-700 hover:border-gray-600 rounded-lg p-2 transition-all duration-200 hover:scale-105"
                    >
                      <div 
                        className="w-full h-6 rounded mb-1.5 opacity-80 group-hover:opacity-100 transition-opacity"
                        style={{ 
                          background: `linear-gradient(45deg, ${preset.preview}, ${preset.preview}dd)` 
                        }}
                      />
                      <span className="text-xs text-gray-300 group-hover:text-white font-medium block truncate">
                        {preset.name}
                      </span>
                      <span className="text-xs text-gray-500 group-hover:text-gray-400 capitalize">
                        {preset.category}
                      </span>
                    </button>
                  ))}
                </div>
              )}

              {/* Favorites (Saved Styles) */}
              {presetViewMode === 'favorites' && (
                <div className="space-y-2 max-h-48 overflow-y-auto">
                  {savedStyles.length > 0 ? (
                    savedStyles.map((style, index) => (
                      <div key={index} className="group bg-gray-800/50 rounded-lg p-3 border border-gray-700 hover:border-purple-500/50 transition-colors">
                        <div className="flex items-center justify-between mb-2">
                          <h4 className="text-sm font-medium text-white">{style.name}</h4>
                          <DropdownMenu>
                            <DropdownMenuTrigger asChild>
                              <Button variant="ghost" size="sm" className="h-6 w-6 p-0 text-gray-400 hover:text-white">
                                <MoreHorizontal className="h-3 w-3" />
                              </Button>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent className="bg-gray-900 border-gray-700">
                              <DropdownMenuItem onClick={() => loadStyle(style)}>
                                <Palette className="h-4 w-4 mr-2" />
                                Apply Style
                              </DropdownMenuItem>
                              {style.lut_data && (
                                <DropdownMenuItem onClick={() => downloadLUT(style)}>
                                  <Download className="h-4 w-4 mr-2" />
                                  Download LUT
                                </DropdownMenuItem>
                              )}
                              <DropdownMenuItem 
                                onClick={() => deleteStyle(index)}
                                className="text-red-400 hover:text-red-300"
                              >
                                <X className="h-4 w-4 mr-2" />
                                Delete
                              </DropdownMenuItem>
                            </DropdownMenuContent>
                          </DropdownMenu>
                        </div>
                        <p className="text-xs text-gray-400 mb-2">{style.description}</p>
                        <Button
                          variant="ghost"
                          size="sm"
                          className="w-full h-7 text-xs bg-purple-600/20 text-purple-400 hover:bg-purple-600/30"
                          onClick={() => loadStyle(style)}
                        >
                          Apply Style
                        </Button>
                      </div>
                    ))
                  ) : (
                    <div className="text-center py-6 space-y-2">
                      <Star className="h-8 w-8 mx-auto text-gray-600" />
                      <div className="space-y-1">
                        <h3 className="text-sm font-medium text-gray-400">No favorites yet</h3>
                        <p className="text-xs text-gray-500">
                          Generate AI looks and save your favorites here
                        </p>
                      </div>
                    </div>
                  )}
                </div>
              )}
            </div>

            {/* Color Adjustments - Accordion Style */}
            {hasMedia && (
              <div className="space-y-4 mb-6">
                <div className="space-y-2">
                  {/* Basic Controls */}
                  <div className="border border-gray-700 rounded-lg">
                    <button
                      onClick={() => toggleSection('basic')}
                      className="w-full flex items-center justify-between px-4 py-3 text-left hover:bg-gray-800/50 transition-colors"
                    >
                      <div className="flex items-center space-x-2">
                        <Sun className="h-4 w-4 text-orange-400" />
                        <span className="text-sm font-medium text-white">Basic Controls</span>
                      </div>
                      {expandedSections.basic ? <ChevronUp className="h-4 w-4 text-gray-400" /> : <ChevronDown className="h-4 w-4 text-gray-400" />}
                    </button>
                    {expandedSections.basic && (
                      <div className="px-4 pb-4 space-y-4">
                        {/* Exposure */}
                        <div className="space-y-2">
                          <div className="flex justify-between text-xs">
                            <span className="text-gray-400">Exposure</span>
                            <span className="text-white">{colorAdjustments.exposure[0]}</span>
                          </div>
                          <Slider 
                            value={colorAdjustments.exposure} 
                            onValueChange={(value) => handleColorAdjustment('exposure', value)}
                            min={-100} max={100} step={1} 
                            className="w-full" 
                          />
                        </div>

                        {/* Contrast */}
                        <div className="space-y-2">
                          <div className="flex justify-between text-xs">
                            <span className="text-gray-400">Contrast</span>
                            <span className="text-white">{colorAdjustments.contrast[0]}</span>
                          </div>
                          <Slider 
                            value={colorAdjustments.contrast} 
                            onValueChange={(value) => handleColorAdjustment('contrast', value)}
                            min={-100} max={100} step={1} 
                            className="w-full" 
                          />
                        </div>

                        {/* Highlights */}
                        <div className="space-y-2">
                          <div className="flex justify-between text-xs">
                            <span className="text-gray-400">Highlights</span>
                            <span className="text-white">{colorAdjustments.highlights[0]}</span>
                          </div>
                          <Slider 
                            value={colorAdjustments.highlights} 
                            onValueChange={(value) => handleColorAdjustment('highlights', value)}
                            min={-100} max={100} step={1} 
                            className="w-full" 
                          />
                        </div>

                        {/* Shadows */}
                        <div className="space-y-2">
                          <div className="flex justify-between text-xs">
                            <span className="text-gray-400">Shadows</span>
                            <span className="text-white">{colorAdjustments.shadows[0]}</span>
                          </div>
                          <Slider 
                            value={colorAdjustments.shadows} 
                            onValueChange={(value) => handleColorAdjustment('shadows', value)}
                            min={-100} max={100} step={1} 
                            className="w-full" 
                          />
                        </div>

                        {/* Saturation */}
                        <div className="space-y-2">
                          <div className="flex justify-between text-xs">
                            <span className="text-gray-400">Saturation</span>
                            <span className="text-white">{colorAdjustments.saturation[0]}</span>
                          </div>
                          <Slider 
                            value={colorAdjustments.saturation} 
                            onValueChange={(value) => handleColorAdjustment('saturation', value)}
                            min={-100} max={100} step={1} 
                            className="w-full" 
                          />
                        </div>

                        {/* Temperature */}
                        <div className="space-y-2">
                          <div className="flex justify-between text-xs">
                            <span className="text-gray-400">Temperature</span>
                            <span className="text-white">{colorAdjustments.temperature[0]}</span>
                          </div>
                          <Slider 
                            value={colorAdjustments.temperature} 
                            onValueChange={(value) => handleColorAdjustment('temperature', value)}
                            min={-100} max={100} step={1} 
                            className="w-full" 
                          />
                        </div>

                        {/* Brightness */}
                        <div className="space-y-2">
                          <div className="flex justify-between text-xs">
                            <span className="text-gray-400">Brightness</span>
                            <span className="text-white">{colorAdjustments.brightness[0]}</span>
                          </div>
                          <Slider 
                            value={colorAdjustments.brightness} 
                            onValueChange={(value) => handleColorAdjustment('brightness', value)}
                            min={-100} max={100} step={1} 
                            className="w-full" 
                          />
                        </div>

                        {/* Vibrance */}
                        <div className="space-y-2">
                          <div className="flex justify-between text-xs">
                            <span className="text-gray-400">Vibrance</span>
                            <span className="text-white">{colorAdjustments.vibrance[0]}</span>
                          </div>
                          <Slider 
                            value={colorAdjustments.vibrance} 
                            onValueChange={(value) => handleColorAdjustment('vibrance', value)}
                            min={-100} max={100} step={1} 
                            className="w-full" 
                          />
                        </div>

                        {/* Clarity */}
                        <div className="space-y-2">
                          <div className="flex justify-between text-xs">
                            <span className="text-gray-400">Clarity</span>
                            <span className="text-white">{colorAdjustments.clarity[0]}</span>
                          </div>
                          <Slider 
                            value={colorAdjustments.clarity} 
                            onValueChange={(value) => handleColorAdjustment('clarity', value)}
                            min={-100} max={100} step={1} 
                            className="w-full" 
                          />
                        </div>

                        {/* Hue */}
                        <div className="space-y-2">
                          <div className="flex justify-between text-xs">
                            <span className="text-gray-400">Hue</span>
                            <span className="text-white">{colorAdjustments.hue[0]}</span>
                          </div>
                          <Slider 
                            value={colorAdjustments.hue} 
                            onValueChange={(value) => handleColorAdjustment('hue', value)}
                            min={-180} max={180} step={1} 
                            className="w-full" 
                          />
                        </div>
                      </div>
                    )}
                  </div>

                  {/* Professional Controls */}
                  <div className="border border-gray-700 rounded-lg">
                    <button
                      onClick={() => toggleSection('professional')}
                      className="w-full flex items-center justify-between px-4 py-3 text-left hover:bg-gray-800/50 transition-colors"
                    >
                      <div className="flex items-center space-x-2">
                        <Sliders className="h-4 w-4 text-purple-400" />
                        <span className="text-sm font-medium text-white">Professional</span>
                      </div>
                      {expandedSections.professional ? <ChevronUp className="h-4 w-4 text-gray-400" /> : <ChevronDown className="h-4 w-4 text-gray-400" />}
                    </button>
                    {expandedSections.professional && (
                      <div className="px-4 pb-4 space-y-4">
                        {/* Lift */}
                        <div className="space-y-2">
                          <div className="flex justify-between text-xs">
                            <span className="text-gray-400">Lift (Shadows)</span>
                            <span className="text-white">{colorAdjustments.lift[0]}</span>
                          </div>
                          <Slider 
                            value={colorAdjustments.lift} 
                            onValueChange={(value) => handleColorAdjustment('lift', value)}
                            min={-50} max={50} step={1} 
                            className="w-full" 
                          />
                        </div>

                        {/* Gamma */}
                        <div className="space-y-2">
                          <div className="flex justify-between text-xs">
                            <span className="text-gray-400">Gamma (Midtones)</span>
                            <span className="text-white">{colorAdjustments.gamma[0].toFixed(2)}</span>
                          </div>
                          <Slider 
                            value={[colorAdjustments.gamma[0]]} 
                            onValueChange={(value) => handleColorAdjustment('gamma', value)}
                            min={0.5} max={2.0} step={0.01} 
                            className="w-full" 
                          />
                        </div>

                        {/* Gain */}
                        <div className="space-y-2">
                          <div className="flex justify-between text-xs">
                            <span className="text-gray-400">Gain (Highlights)</span>
                            <span className="text-white">{colorAdjustments.gain[0].toFixed(2)}</span>
                          </div>
                          <Slider 
                            value={[colorAdjustments.gain[0]]} 
                            onValueChange={(value) => handleColorAdjustment('gain', value)}
                            min={0.5} max={2.0} step={0.01} 
                            className="w-full" 
                          />
                        </div>

                        {/* Offset */}
                        <div className="space-y-2">
                          <div className="flex justify-between text-xs">
                            <span className="text-gray-400">Offset</span>
                            <span className="text-white">{colorAdjustments.offset[0]}</span>
                          </div>
                          <Slider 
                            value={colorAdjustments.offset} 
                            onValueChange={(value) => handleColorAdjustment('offset', value)}
                            min={-50} max={50} step={1} 
                            className="w-full" 
                          />
                        </div>
                      </div>
                    )}
                  </div>

                  {/* Color Wheels */}
                  <div className="border border-gray-700 rounded-lg">
                    <button
                      onClick={() => toggleSection('colorWheels')}
                      className="w-full flex items-center justify-between px-4 py-3 text-left hover:bg-gray-800/50 transition-colors"
                    >
                      <div className="flex items-center space-x-2">
                        <CircleDot className="h-4 w-4 text-emerald-400" />
                        <span className="text-sm font-medium text-white">Color Wheels</span>
                      </div>
                      {expandedSections.colorWheels ? <ChevronUp className="h-4 w-4 text-gray-400" /> : <ChevronDown className="h-4 w-4 text-gray-400" />}
                    </button>
                    {expandedSections.colorWheels && (
                      <div className="px-4 pb-4 space-y-6">
                        <div className="grid grid-cols-2 gap-4">
                          <ColorWheel
                            title="Shadows"
                            value={colorAdjustments.shadowsWheel}
                            onChange={(newValue) => handleColorWheelChange('shadowsWheel', newValue)}
                            size={85}
                          />
                          <ColorWheel
                            title="Highlights"
                            value={colorAdjustments.highlightsWheel}
                            onChange={(newValue) => handleColorWheelChange('highlightsWheel', newValue)}
                            size={85}
                          />
                        </div>
                        
                        {/* Secondary Color Wheels */}
                        <div className="grid grid-cols-2 gap-4 mt-4">
                          <ColorWheel
                            title="Midtones"
                            value={colorAdjustments.midtonesWheel}
                            onChange={(newValue) => handleColorWheelChange('midtonesWheel', newValue)}
                            size={75}
                          />
                          <div className="space-y-3">
                            <div className="text-xs text-gray-400 font-medium text-center tracking-wide">
                              Master
                            </div>
                            <div className="space-y-2">
                              <div className="space-y-1">
                                <div className="flex justify-between text-xs">
                                  <span className="text-gray-400">Saturation</span>
                                  <span className="text-white">{colorAdjustments.saturation[0]}</span>
                                </div>
                                <Slider 
                                  value={colorAdjustments.saturation} 
                                  onValueChange={(value) => handleColorAdjustment('saturation', value)}
                                  min={-100} max={100} step={1} 
                                  className="w-full" 
                                />
                              </div>
                              <div className="space-y-1">
                                <div className="flex justify-between text-xs">
                                  <span className="text-gray-400">Vibrance</span>
                                  <span className="text-white">{colorAdjustments.vibrance[0]}</span>
                                </div>
                                <Slider 
                                  value={colorAdjustments.vibrance} 
                                  onValueChange={(value) => handleColorAdjustment('vibrance', value)}
                                  min={-100} max={100} step={1} 
                                  className="w-full" 
                                />
                              </div>
                              <div className="space-y-1">
                                <div className="flex justify-between text-xs">
                                  <span className="text-gray-400">Temperature</span>
                                  <span className="text-white">{colorAdjustments.temperature[0]}</span>
                                </div>
                                <Slider 
                                  value={colorAdjustments.temperature} 
                                  onValueChange={(value) => handleColorAdjustment('temperature', value)}
                                  min={-100} max={100} step={1} 
                                  className="w-full" 
                                />
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>

                  {/* Film Emulation */}
                  <div className="border border-gray-700 rounded-lg">
                    <button
                      onClick={() => toggleSection('filmEmulation')}
                      className="w-full flex items-center justify-between px-4 py-3 text-left hover:bg-gray-800/50 transition-colors"
                    >
                      <div className="flex items-center space-x-2">
                        <Film className="h-4 w-4 text-blue-400" />
                        <span className="text-sm font-medium text-white">Film Emulation</span>
                      </div>
                      {expandedSections.filmEmulation ? <ChevronUp className="h-4 w-4 text-gray-400" /> : <ChevronDown className="h-4 w-4 text-gray-400" />}
                    </button>
                    {expandedSections.filmEmulation && (
                      <div className="px-4 pb-4 space-y-4">
                        {/* Film Grain */}
                        <div className="space-y-2">
                          <div className="flex justify-between text-xs">
                            <span className="text-gray-400">Film Grain</span>
                            <span className="text-white">{colorAdjustments.filmGrain[0]}%</span>
                          </div>
                          <Slider 
                            value={colorAdjustments.filmGrain} 
                            onValueChange={(value) => handleColorAdjustment('filmGrain', value)}
                            min={0} max={100} step={1} 
                            className="w-full" 
                          />
                        </div>

                        {/* Vignette */}
                        <div className="space-y-2">
                          <div className="flex justify-between text-xs">
                            <span className="text-gray-400">Vignette</span>
                            <span className="text-white">{colorAdjustments.vignette[0]}%</span>
                          </div>
                          <Slider 
                            value={colorAdjustments.vignette} 
                            onValueChange={(value) => handleColorAdjustment('vignette', value)}
                            min={0} max={100} step={1} 
                            className="w-full" 
                          />
                        </div>

                        {/* Bleach Bypass */}
                        <div className="space-y-2">
                          <div className="flex justify-between text-xs">
                            <span className="text-gray-400">Bleach Bypass</span>
                            <span className="text-white">{colorAdjustments.bleachBypass[0]}%</span>
                          </div>
                          <Slider 
                            value={colorAdjustments.bleachBypass} 
                            onValueChange={(value) => handleColorAdjustment('bleachBypass', value)}
                            min={0} max={100} step={1} 
                            className="w-full" 
                          />
                        </div>

                        {/* Orange & Teal */}
                        <div className="space-y-2">
                          <div className="flex justify-between text-xs">
                            <span className="text-gray-400">Orange & Teal</span>
                            <span className="text-white">{colorAdjustments.orangeTeal[0]}%</span>
                          </div>
                          <Slider 
                            value={colorAdjustments.orangeTeal} 
                            onValueChange={(value) => handleColorAdjustment('orangeTeal', value)}
                            min={0} max={100} step={1} 
                            className="w-full" 
                          />
                        </div>
                      </div>
                    )}
                  </div>

                  {/* Advanced Controls */}
                  <div className="border border-gray-700 rounded-lg">
                    <button
                      onClick={() => toggleSection('advanced')}
                      className="w-full flex items-center justify-between px-4 py-3 text-left hover:bg-gray-800/50 transition-colors"
                    >
                      <div className="flex items-center space-x-2">
                        <Target className="h-4 w-4 text-red-400" />
                        <span className="text-sm font-medium text-white">Advanced</span>
                      </div>
                      {expandedSections.advanced ? <ChevronUp className="h-4 w-4 text-gray-400" /> : <ChevronDown className="h-4 w-4 text-gray-400" />}
                    </button>
                    {expandedSections.advanced && (
                      <div className="px-4 pb-4 space-y-4">
                        {/* Curve Controls */}
                        <div className="space-y-3">
                          <div className="text-xs text-gray-400 font-medium">Tone Curves</div>
                          <div className="grid grid-cols-2 gap-3">
                            <div className="space-y-1">
                              <div className="flex justify-between text-xs">
                                <span className="text-gray-400">Highlight Roll</span>
                                <span className="text-white">{colorAdjustments.highlightDetail[0]}</span>
                              </div>
                              <Slider 
                                value={colorAdjustments.highlightDetail} 
                                onValueChange={(value) => handleColorAdjustment('highlightDetail', value)}
                                min={-100} max={100} step={1} 
                                className="w-full" 
                              />
                            </div>
                            <div className="space-y-1">
                              <div className="flex justify-between text-xs">
                                <span className="text-gray-400">Shadow Roll</span>
                                <span className="text-white">{colorAdjustments.shadowDetail[0]}</span>
                              </div>
                              <Slider 
                                value={colorAdjustments.shadowDetail} 
                                onValueChange={(value) => handleColorAdjustment('shadowDetail', value)}
                                min={-100} max={100} step={1} 
                                className="w-full" 
                              />
                            </div>
                          </div>
                        </div>

                        {/* Color Science */}
                        <div className="space-y-3">
                          <div className="text-xs text-gray-400 font-medium">Color Science</div>
                          <div className="space-y-2">
                            <div className="space-y-1">
                              <div className="flex justify-between text-xs">
                                <span className="text-gray-400">Color Balance</span>
                                <span className="text-white">{colorAdjustments.colorBalance[0]}</span>
                              </div>
                              <Slider 
                                value={colorAdjustments.colorBalance} 
                                onValueChange={(value) => handleColorAdjustment('colorBalance', value)}
                                min={-100} max={100} step={1} 
                                className="w-full" 
                              />
                            </div>
                            <div className="space-y-1">
                              <div className="flex justify-between text-xs">
                                <span className="text-gray-400">Skin Tone Protection</span>
                                <span className="text-white">{colorAdjustments.skinTone[0]}</span>
                              </div>
                              <Slider 
                                value={colorAdjustments.skinTone} 
                                onValueChange={(value) => handleColorAdjustment('skinTone', value)}
                                min={0} max={100} step={1} 
                                className="w-full" 
                              />
                            </div>
                          </div>
                        </div>

                        {/* Noise & Detail */}
                        <div className="space-y-3">
                          <div className="text-xs text-gray-400 font-medium">Noise & Detail</div>
                          <div className="grid grid-cols-2 gap-3">
                            <div className="space-y-1">
                              <div className="flex justify-between text-xs">
                                <span className="text-gray-400">Luma Smooth</span>
                                <span className="text-white">{colorAdjustments.luminanceSmoothing[0]}</span>
                              </div>
                              <Slider 
                                value={colorAdjustments.luminanceSmoothing} 
                                onValueChange={(value) => handleColorAdjustment('luminanceSmoothing', value)}
                                min={0} max={100} step={1} 
                                className="w-full" 
                              />
                            </div>
                            <div className="space-y-1">
                              <div className="flex justify-between text-xs">
                                <span className="text-gray-400">Chroma Smooth</span>
                                <span className="text-white">{colorAdjustments.colorSmoothing[0]}</span>
                              </div>
                              <Slider 
                                value={colorAdjustments.colorSmoothing} 
                                onValueChange={(value) => handleColorAdjustment('colorSmoothing', value)}
                                min={0} max={100} step={1} 
                                className="w-full" 
                              />
                            </div>
                          </div>
                        </div>

                        {/* Scopes Toggle */}
                        <div className="space-y-2">
                          <div className="text-xs text-gray-400 font-medium">Scopes & Analysis</div>
                          <div className="grid grid-cols-2 gap-2">
                            <button className="px-3 py-2 bg-gray-700 hover:bg-gray-600 rounded text-xs text-gray-300 transition-colors">
                              Histogram
                            </button>
                            <button className="px-3 py-2 bg-gray-700 hover:bg-gray-600 rounded text-xs text-gray-300 transition-colors">
                              Waveform
                            </button>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            )}

            {/* File Metadata */}
            {fileMetadata && (
              <div className="space-y-3 mb-6">
                <h3 className="text-sm font-medium text-white">File Info</h3>
                <div className="space-y-2 text-xs">
                  <div className="flex justify-between">
                    <span className="text-gray-400">Name</span>
                    <span className="text-white truncate ml-2 max-w-32" title={fileMetadata.name}>
                      {fileMetadata.name}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-400">Size</span>
                    <span className="text-white">
                      {(fileMetadata.size / (1024 * 1024)).toFixed(1)} MB
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-400">Type</span>
                    <span className="text-white uppercase">
                      {fileMetadata.type.split('/')[1]}
                    </span>
                  </div>
                  {fileMetadata.dimensions && (
                    <div className="flex justify-between">
                      <span className="text-gray-400">Size</span>
                      <span className="text-white">
                        {fileMetadata.dimensions.width} × {fileMetadata.dimensions.height}
                      </span>
                    </div>
                  )}
                </div>
              </div>
            )}

            {/* LUT Strength */}
            <div className="space-y-3 mb-6">
              <div className="flex justify-between text-sm">
                <span className="text-gray-400">LUT Strength</span>
                <span className="text-white">{lutStrength[0]}%</span>
              </div>
              <Slider value={lutStrength} onValueChange={setLutStrength} max={100} step={1} className="w-full" />
            </div>

            {/* LUT Presets */}
            {hasMedia && (
              <div className="space-y-3 mb-6">
                <h3 className="text-sm font-medium text-white">LUT Presets</h3>
                <div className="grid grid-cols-1 gap-2">
                  {lutPresets.map((preset, index) => (
                    <Button
                      key={index}
                      variant={selectedPreset === preset.name ? "secondary" : "ghost"}
                      className={`justify-start h-8 text-xs ${
                        selectedPreset === preset.name
                          ? "bg-purple-500/20 text-purple-400 border border-purple-500/30"
                          : "text-gray-400 hover:text-white hover:bg-gray-800/50"
                      }`}
                      onClick={() => applyLUTPreset(preset.name)}
                    >
                      <div className={`w-3 h-3 rounded-full bg-gradient-to-r ${preset.color} mr-2`} />
                      {preset.name}
                    </Button>
                  ))}
                </div>
              </div>
            )}

            {/* Color Wheels */}
            <div className="space-y-4 mb-6">
              <div className="grid grid-cols-2 gap-4">
                {/* Color Wheel 1 */}
                <div className="space-y-2">
                  <div className="flex justify-between text-xs text-gray-500">
                    <span>C</span>
                    <span>H: 0°</span>
                    <span>S: 100%</span>
                  </div>
                  <div className="relative h-20 w-20 mx-auto">
                    <div className="absolute inset-0 rounded-full bg-gradient-conic from-red-500 via-yellow-500 via-green-500 via-cyan-500 via-blue-500 via-purple-500 to-red-500" />
                    <div className="absolute inset-2 rounded-full bg-black" />
                    <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-2 h-2 bg-white rounded-full border border-gray-800" />
                  </div>
                </div>

                {/* Color Wheel 2 */}
                <div className="space-y-2">
                  <div className="flex justify-between text-xs text-gray-500">
                    <span>H</span>
                    <span>H: 0°</span>
                    <span>S: 100%</span>
                  </div>
                  <div className="relative h-20 w-20 mx-auto">
                    <div className="absolute inset-0 rounded-full bg-gradient-conic from-red-500 via-yellow-500 via-green-500 via-cyan-500 via-blue-500 via-purple-500 to-red-500" />
                    <div className="absolute inset-2 rounded-full bg-black" />
                    <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-2 h-2 bg-white rounded-full border border-gray-800" />
                  </div>
                </div>
              </div>
            </div>

            {/* Quick Actions */}
            <div className="space-y-2">
              <div className="flex space-x-2">
                <Button
                  size="sm"
                  variant={showOriginal ? "secondary" : "outline"}
                  onClick={() => setShowOriginal(!showOriginal)}
                  className="flex-1 border-gray-600 h-8"
                >
                  <Eye className="h-3 w-3 mr-1" />
                  {showOriginal ? "Hide" : "Show"}
                </Button>
                <Button size="sm" variant="outline" className="border-gray-600 h-8">
                  <Share2 className="h-3 w-3" />
                </Button>
              </div>
              
              {/* Reset and Copy Controls */}
              {hasMedia && (
                <div className="flex space-x-2">
                  <Button
                    size="sm"
                    variant="outline"
                    onClick={handleResetAdjustments}
                    className="flex-1 border-gray-600 h-8 text-xs"
                  >
                    <RotateCcw className="h-3 w-3 mr-1" />
                    Reset
                  </Button>

                  {/* Save Template Button */}
                  <Button
                    size="sm"
                    variant="outline"
                    onClick={() => {
                      const templateName = window.prompt('Enter template name:')
                      if (templateName) {
                        saveAsTemplate(templateName.trim())
                      }
                    }}
                    className="flex-1 border-gray-600 h-8 text-xs"
                  >
                    <Star className="h-3 w-3 mr-1" />
                    Save Template
                  </Button>
                  <Button 
                    size="sm" 
                    variant="outline" 
                    className="flex-1 border-gray-600 h-8 text-xs"
                    onClick={() => {
                      navigator.clipboard.writeText(JSON.stringify(colorAdjustments))
                      console.log('Adjustments copied to clipboard')
                    }}
                  >
                    Copy Settings
                  </Button>
                </div>
              )}
              
              {/* LUT Export */}
              {hasMedia && (
                <div className="flex space-x-2">
                  <Button
                    size="sm"
                    variant="outline"
                    onClick={exportLUT}
                    className="flex-1 border-gray-600 h-8 text-xs"
                  >
                    <Download className="h-3 w-3 mr-1" />
                    Export LUT (.cube)
                  </Button>
                </div>
              )}
            </div>
          </div>
        </aside>
      </div>

      {/* Color Palette Modal */}
      <Dialog open={showColorPalette} onOpenChange={setShowColorPalette}>
        <DialogContent className="max-w-md bg-gray-900 border-gray-700">
          <DialogHeader>
            <DialogTitle className="text-lg font-semibold text-white flex items-center space-x-2">
              <PaletteIcon className="h-4 w-4 text-green-400" />
              <span>Color Palette</span>
            </DialogTitle>
          </DialogHeader>
          
          <div className="space-y-4">
            {extractedColors.length > 0 ? (
              <>
                <p className="text-sm text-gray-400">
                  Dominant colors extracted from your image. Click to copy hex code.
                </p>
                                 <div className="grid grid-cols-1 gap-3">
                   {extractedColors.map((color, index) => (
                     <div
                       key={index}
                       className="flex items-center space-x-3 p-3 bg-gray-800/50 rounded-lg hover:bg-gray-800/70 cursor-pointer transition-colors border border-gray-700"
                       onClick={() => copyColorToClipboard(color)}
                       title="Click to copy hex code"
                     >
                       <div
                         className="w-10 h-10 rounded-lg border-2 border-gray-600 flex-shrink-0"
                         style={{ backgroundColor: color.color }}
                       />
                       <div className="flex-1 min-w-0">
                         <div className="text-sm font-mono text-white">
                           #{color.rgb.r.toString(16).padStart(2, '0')}{color.rgb.g.toString(16).padStart(2, '0')}{color.rgb.b.toString(16).padStart(2, '0')}
                         </div>
                         <div className="text-xs text-gray-400">
                           RGB({color.rgb.r}, {color.rgb.g}, {color.rgb.b})
                         </div>
                         <div className="text-xs text-gray-500">
                           {color.percentage.toFixed(1)}% of image
                         </div>
                       </div>
                       <Copy className="h-4 w-4 text-gray-400 hover:text-white" />
                     </div>
                   ))}
                 </div>
                <div className="text-xs text-gray-500 text-center">
                  Colors are sorted by prominence in the image
                </div>
              </>
            ) : (
              <div className="text-center py-8">
                <PaletteIcon className="h-12 w-12 text-gray-600 mx-auto mb-3" />
                <p className="text-gray-400">Extracting colors from image...</p>
              </div>
            )}
          </div>
        </DialogContent>
      </Dialog>

      {/* Projects Modal */}
      <Dialog open={showProjectsModal} onOpenChange={setShowProjectsModal}>
        <DialogContent className="max-w-2xl max-h-[70vh] bg-gray-900 border-gray-700">
          <DialogHeader>
            <DialogTitle className="text-lg font-semibold text-white flex items-center space-x-2">
              <FolderOpen className="h-4 w-4 text-purple-400" />
              <span>Your Projects</span>
            </DialogTitle>
          </DialogHeader>
          
          <div className="space-y-4">
            {/* Quick Actions */}
            <div className="flex space-x-2">
              <Button 
                size="sm"
                className="bg-gradient-to-r from-purple-600 to-emerald-500 hover:from-purple-700 hover:to-emerald-600"
                onClick={handleFileUpload}
              >
                <Upload className="h-3 w-3 mr-1.5" />
                Upload Media
              </Button>
              <Button size="sm" variant="outline" className="border-gray-600 hover:bg-gray-800">
                <Plus className="h-3 w-3 mr-1.5" />
                Blank Project
              </Button>
            </div>

            {/* Projects Grid */}
            <div className="grid grid-cols-2 md:grid-cols-3 gap-3 max-h-64 overflow-y-auto pr-1">
              {projects.map((project) => (
                <Card 
                  key={project.id}
                  className="bg-gray-800/50 border-gray-700 hover:bg-gray-800/70 cursor-pointer transition-all duration-200 hover:scale-[1.02]"
                  onClick={() => handleProjectClick(project.id)}
                >
                  <CardContent className="p-0">
                    {/* Thumbnail */}
                    <div className="relative aspect-video bg-gray-700 rounded-t-lg overflow-hidden">
                      <img 
                        src={project.thumbnail}
                        alt={project.name}
                        className="w-full h-full object-cover"
                      />
                      
                      {/* Type Badge */}
                      <div className="absolute top-1.5 left-1.5">
                        <Badge className="bg-black/80 text-white border-gray-600 text-xs px-1.5 py-0.5">
                          {project.type === 'video' ? (
                            <Video className="h-2.5 w-2.5 mr-0.5" />
                          ) : (
                            <Camera className="h-2.5 w-2.5 mr-0.5" />
                          )}
                          {project.type}
                        </Badge>
                      </div>
                      
                      {/* Star Badge */}
                      {project.isStarred && (
                        <div className="absolute top-1.5 right-1.5">
                          <Star className="h-3 w-3 text-yellow-400 fill-current" />
                        </div>
                      )}
                      
                      {/* Hover Overlay */}
                      <div className="absolute inset-0 bg-black/0 hover:bg-black/20 transition-colors duration-200 flex items-center justify-center opacity-0 hover:opacity-100">
                        <Play className="h-5 w-5 text-white" />
                      </div>
                    </div>
                    
                    {/* Project Info */}
                    <div className="p-2 space-y-1">
                      <div className="flex items-center justify-between">
                        <h3 className="font-medium text-white truncate text-sm">{project.name}</h3>
                      </div>
                      
                      <div className="flex items-center space-x-1 text-xs text-gray-400">
                        <Clock className="h-2.5 w-2.5" />
                        <span>{project.lastModified}</span>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>

            {/* Empty State for no projects */}
            {projects.length === 0 && (
              <div className="text-center py-8 space-y-3">
                <div className="h-12 w-12 mx-auto rounded-lg bg-gray-800 flex items-center justify-center">
                  <FolderOpen className="h-6 w-6 text-gray-400" />
                </div>
                <div className="space-y-1">
                  <h3 className="text-base font-medium text-white">No projects yet</h3>
                  <p className="text-sm text-gray-400">Upload your first media file to get started</p>
                </div>
                <Button 
                  size="sm"
                  className="bg-gradient-to-r from-purple-600 to-emerald-500 hover:from-purple-700 hover:to-emerald-600"
                  onClick={handleFileUpload}
                >
                  <Upload className="h-3 w-3 mr-1.5" />
                  Upload Media
                </Button>
              </div>
            )}
          </div>
        </DialogContent>
      </Dialog>

      {/* Style Save Dialog */}
      <Dialog open={showStyleSaveDialog} onOpenChange={setShowStyleSaveDialog}>
        <DialogContent className="max-w-md bg-gray-900 border-gray-700">
          <DialogHeader>
            <DialogTitle className="text-lg font-semibold text-white flex items-center space-x-2">
              <Palette className="h-4 w-4 text-purple-400" />
              <span>Save Style</span>
            </DialogTitle>
          </DialogHeader>
          
          <div className="space-y-4">
            <p className="text-sm text-gray-400">
              Do you like this style? Save it to your library for future use.
            </p>
            
            {currentGeneratedStyle && (
              <div className="bg-gray-800/50 rounded-lg p-3 border border-gray-700">
                <h4 className="text-sm font-medium text-white mb-1">Style Preview</h4>
                <p className="text-xs text-gray-400 mb-2">{currentGeneratedStyle.description}</p>
                <div className="grid grid-cols-2 gap-2 text-xs">
                  <div>
                    <span className="text-gray-400">Contrast:</span>
                    <span className="text-white ml-1">{currentGeneratedStyle.adjustments.contrast[0]}</span>
                  </div>
                  <div>
                    <span className="text-gray-400">Saturation:</span>
                    <span className="text-white ml-1">{currentGeneratedStyle.adjustments.saturation[0]}</span>
                  </div>
                  <div>
                    <span className="text-gray-400">Temperature:</span>
                    <span className="text-white ml-1">{currentGeneratedStyle.adjustments.temperature[0]}</span>
                  </div>
                  <div>
                    <span className="text-gray-400">Exposure:</span>
                    <span className="text-white ml-1">{currentGeneratedStyle.adjustments.exposure[0]}</span>
                  </div>
                </div>
              </div>
            )}
            
            <form onSubmit={(e) => {
              e.preventDefault()
              const formData = new FormData(e.currentTarget)
              const styleName = formData.get('styleName') as string
              if (styleName.trim()) {
                saveCurrentStyle(styleName.trim())
              }
            }}>
              <div className="space-y-3">
                <div>
                  <label htmlFor="styleName" className="text-sm font-medium text-white block mb-2">
                    Style Name
                  </label>
                  <Input
                    id="styleName"
                    name="styleName"
                    defaultValue={currentGeneratedStyle?.name || ''}
                    placeholder="Enter a name for this style..."
                    className="bg-gray-800 border-gray-600 text-white placeholder-gray-400"
                    autoFocus
                  />
                </div>
                
                <div className="flex space-x-2">
                  <Button
                    type="submit"
                    className="flex-1 bg-purple-600 hover:bg-purple-700 text-white"
                  >
                    <Star className="h-4 w-4 mr-2" />
                    Save Style
                  </Button>
                  <Button
                    type="button"
                    variant="outline"
                    className="border-gray-600 text-gray-400 hover:text-white"
                    onClick={() => setShowStyleSaveDialog(false)}
                  >
                    Skip
                  </Button>
                </div>
              </div>
            </form>
          </div>
        </DialogContent>
      </Dialog>

      {/* Main Focus Overlay Modal */}
      {showMainFocus && workflowMode === 'image-repurpose' && (
        <div 
          className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4"
          onClick={(e) => {
            if (e.target === e.currentTarget) {
              setShowMainFocus(false)
            }
          }}
        >
          <div className="bg-gray-900 border border-emerald-500/30 rounded-xl shadow-2xl max-w-2xl w-full overflow-hidden">
            {/* Header */}
            <div className="flex items-center justify-between p-6 border-b border-emerald-500/20 bg-emerald-900/10">
              <div className="flex items-center space-x-3">
                <div className="h-10 w-10 rounded-lg bg-emerald-600/20 flex items-center justify-center">
                  <User className="h-5 w-5 text-emerald-400" />
                </div>
                <div>
                  <h2 className="text-lg font-semibold text-white">Main Focus</h2>
                  <p className="text-sm text-gray-400">What should stay the same in your image? (Select up to 3)</p>
                </div>
              </div>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowMainFocus(false)}
                className="h-8 w-8 p-0 text-gray-400 hover:text-white hover:bg-gray-800"
              >
                <X className="h-4 w-4" />
              </Button>
            </div>

            {/* Content */}
            <div className="p-6">
              <div className="space-y-4">
                <div className="text-sm text-gray-300 mb-4">
                  Select what part of your image should be preserved or emphasized in the new generated image:
                </div>
                <div className="grid grid-cols-2 md:grid-cols-3 gap-2">
                  {mainFocusOptions.map((option) => (
                    <button
                      key={option}
                      onClick={() => toggleMainFocus(option)}
                      className={`px-4 py-3 text-sm rounded-lg border transition-all hover:scale-105 ${
                        selectedMainFocus.includes(option)
                          ? 'bg-emerald-600/20 border-emerald-500 text-emerald-300 shadow-lg shadow-emerald-500/20'
                          : selectedMainFocus.length >= 3
                          ? 'bg-gray-800/30 border-gray-700 text-gray-500 cursor-not-allowed'
                          : 'bg-gray-800/50 border-gray-600 text-gray-300 hover:text-white hover:border-gray-500 hover:bg-gray-700/70'
                      }`}
                      disabled={selectedMainFocus.length >= 3 && !selectedMainFocus.includes(option)}
                    >
                      <div className="capitalize font-medium">{option}</div>
                    </button>
                  ))}
                </div>
                
                {selectedMainFocus.length > 0 && (
                  <div className="mt-4 p-3 bg-emerald-900/20 border border-emerald-500/30 rounded-lg">
                    <div className="text-sm text-emerald-400 mb-1">
                      Selected Focus ({selectedMainFocus.length}/3):
                    </div>
                    <div className="text-sm text-emerald-200 capitalize font-medium">
                      {selectedMainFocus.join(', ')}
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* Footer */}
            <div className="flex items-center justify-between p-6 border-t border-gray-700/50 bg-gray-800/30">
              <div className="text-sm text-gray-400">
                This helps AI understand what to preserve from your original image
              </div>
              <div className="flex space-x-3">
                <Button
                  variant="outline"
                  onClick={() => setShowMainFocus(false)}
                  className="border-gray-600 text-gray-400 hover:text-white"
                >
                  Cancel
                </Button>
                <Button
                  onClick={() => setShowMainFocus(false)}
                  className="bg-emerald-600 hover:bg-emerald-700"
                >
                  <User className="h-4 w-4 mr-2" />
                  Set Focus
                </Button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Prompt Styles Overlay Modal */}
      {showPromptStyles && hasMedia && (
        <div 
          className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4"
          onClick={(e) => {
            if (e.target === e.currentTarget) {
              setShowPromptStyles(false)
            }
          }}
        >
                      <div className={`bg-gray-900 rounded-xl shadow-2xl max-w-4xl w-full max-h-[85vh] overflow-hidden flex flex-col ${
              workflowMode === 'color-grade' 
                ? 'border border-purple-500/30' 
                : 'border border-emerald-500/30'
            }`}>
              {/* Header */}
              <div className={`flex items-center justify-between p-6 border-b ${
                workflowMode === 'color-grade'
                  ? 'border-purple-500/20 bg-purple-900/10'
                  : 'border-emerald-500/20 bg-emerald-900/10'
              }`}>
                              <div className="flex items-center space-x-3">
                  <div className={`h-10 w-10 rounded-lg flex items-center justify-center ${
                    workflowMode === 'color-grade' 
                      ? 'bg-purple-600/20' 
                      : 'bg-emerald-600/20'
                  }`}>
                    <Filter className={`h-5 w-5 ${
                      workflowMode === 'color-grade' 
                        ? 'text-purple-400' 
                        : 'text-emerald-400'
                    }`} />
                  </div>
                  <div>
                    <h2 className="text-lg font-semibold text-white">
                      {workflowMode === 'color-grade' ? 'Color Grade Styles' : 'Image Styles'}
                    </h2>
                    <p className="text-sm text-gray-400">
                      {workflowMode === 'color-grade' 
                        ? 'Choose color grading styles for your prompt (1 per category)' 
                        : 'Choose styles to enhance your prompt (1 per category)'
                      }
                    </p>
                  </div>
                </div>
              <div className="flex items-center space-x-3">
                {selectedPromptStyles.length > 0 && (
                  <Badge className="bg-emerald-600 text-white px-3 py-1">
                    {selectedPromptStyles.length} selected
                  </Badge>
                )}
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setShowPromptStyles(false)}
                  className="h-8 w-8 p-0 text-gray-400 hover:text-white hover:bg-gray-800"
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            </div>

            {/* Content */}
            <div className="p-6 overflow-y-auto flex-1">
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {Object.entries(getPromptStylesData()).map(([category, styles]) => (
                  <div key={category} className="space-y-3">
                    <div className="flex items-center space-x-2 pb-2 border-b border-gray-700/50">
                      <div className="flex items-center space-x-2">
                        {/* Color Grade Mode Icons */}
                        {workflowMode === 'color-grade' && category === 'look' && <PaletteIcon className="h-4 w-4 text-purple-400" />}
                        {workflowMode === 'color-grade' && category === 'film' && <Film className="h-4 w-4 text-orange-400" />}
                        {workflowMode === 'color-grade' && category === 'color' && <Droplets className="h-4 w-4 text-blue-400" />}
                        {workflowMode === 'color-grade' && category === 'style' && <CameraIcon className="h-4 w-4 text-green-400" />}
                        {workflowMode === 'color-grade' && category === 'mood' && <Star className="h-4 w-4 text-yellow-400" />}
                        {workflowMode === 'color-grade' && category === 'era' && <Clock className="h-4 w-4 text-cyan-400" />}
                        
                        {/* Image Repurpose Mode Icons */}
                        {workflowMode === 'image-repurpose' && category === 'lighting' && <Lightbulb className="h-4 w-4 text-yellow-400" />}
                        {workflowMode === 'image-repurpose' && category === 'camera' && <CameraIcon className="h-4 w-4 text-blue-400" />}
                        {workflowMode === 'image-repurpose' && category === 'lens' && <Aperture className="h-4 w-4 text-purple-400" />}
                        {workflowMode === 'image-repurpose' && category === 'weather' && <Cloud className="h-4 w-4 text-cyan-400" />}
                        {workflowMode === 'image-repurpose' && category === 'effects' && <EffectIcon className="h-4 w-4 text-pink-400" />}
                        {workflowMode === 'image-repurpose' && category === 'style' && <PaletteIcon className="h-4 w-4 text-green-400" />}
                        {workflowMode === 'image-repurpose' && category === 'mood' && <Star className="h-4 w-4 text-orange-400" />}
                        <span className="text-sm font-medium text-white capitalize">{category}</span>
                      </div>
                      <Badge variant="outline" className="text-xs border-gray-600 text-gray-400">
                        {styles.length} options
                      </Badge>
                    </div>
                    <div className="flex flex-wrap gap-2">
                      {(styles as string[]).map((style: string) => (
                        <button
                          key={style}
                          onClick={() => togglePromptStyle(style)}
                          className={`px-3 py-1.5 text-sm rounded-lg border transition-all hover:scale-105 ${
                            selectedPromptStyles.includes(style)
                              ? 'bg-emerald-600/20 border-emerald-500 text-emerald-300 shadow-lg shadow-emerald-500/20'
                              : 'bg-gray-800/50 border-gray-600 text-gray-300 hover:text-white hover:border-gray-500 hover:bg-gray-700/70'
                          }`}
                        >
                          {style}
                        </button>
                      ))}
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Selected Styles Preview */}
            {selectedPromptStyles.length > 0 && (
              <div className="px-6 py-4 border-t border-emerald-500/20 bg-emerald-900/10 flex-shrink-0">
                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <span className="text-sm font-medium text-emerald-400">Selected Styles:</span>
                    <div className="flex space-x-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={clearPromptStyles}
                        className="h-6 px-2 text-xs border-gray-600 text-gray-400 hover:text-white hover:border-red-500"
                      >
                        Clear All
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => setShowPromptStyles(false)}
                        className="h-6 px-3 text-xs border-emerald-600 text-emerald-400 hover:text-white hover:border-emerald-500"
                      >
                        Continue
                      </Button>
                    </div>
                  </div>
                  <div className="text-sm text-emerald-200 bg-emerald-900/30 rounded-lg px-3 py-2 max-h-20 overflow-y-auto">
                    {selectedPromptStyles.join(', ')}
                  </div>
                </div>
              </div>
            )}

            {/* Footer */}
            <div className="flex items-center justify-between p-6 border-t border-gray-700/50 bg-gray-800/30 flex-shrink-0">
              <div className="text-sm text-gray-400">
                Click styles to add them to your prompt
              </div>
              <div className="flex space-x-3">
                <Button
                  variant="outline"
                  onClick={() => setShowPromptStyles(false)}
                  className="border-gray-600 text-gray-400 hover:text-white"
                >
                  Cancel
                </Button>
                <Button
                  onClick={applyPromptStyles}
                  disabled={selectedPromptStyles.length === 0}
                  className="bg-emerald-600 hover:bg-emerald-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <Sparkles className="h-4 w-4 mr-2" />
                  Apply Styles ({selectedPromptStyles.length})
                </Button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Hidden File Input */}
      <input
        ref={fileInputRef}
        type="file"
        accept="image/*,image/heic,image/heif,video/*,.heic,.heif"
        multiple
        className="hidden"
        onChange={handleFileChange}
      />
    </div>
  )
}
